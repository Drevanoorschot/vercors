field f: Ref



method m1()
{
    var a: Int
    a:=1
    a:=2
    a:=1+2+3
}

method m2(b: Bool) returns (a:Int)
requires b == true && b == true
ensures a == 1 || a == 2
{
  a := -1
  if(b) {
    a:=0
  }
  else
  {
    a:=1
  }
  a := 2
}




method m3()
{
  var a: Int
  a := m2(true)
  a := 1
}

method m4(x: Ref)
  requires acc(x.f)
{
  define A acc(x.f)

  inhale A && true
  exhale acc(x.f)
}

function f1(x: Ref): Bool
  requires acc(x.f)
  ensures x == x.f ==> result


function f2(x: Ref): Bool
  requires acc(x.f)
  ensures x == x.f ==> !result
{ !f1(x) }



method m6(b: Bool) returns (a: Int)
{
  a := 1
  if(a == 1)
  {
    a := -1
  }
  if(!!b)
  {
    a := 2
  }
  else
  {
    a := 3
  }
  a := 4
}



method m_end()
{}

