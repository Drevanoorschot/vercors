field f: Int

predicate pred1(i:Int) {
	i > 0
}

predicate pred2(a:Ref, i:Int) {
	acc(a.f)
}

//not injective clause 2
method test01(xs: Seq[Ref], y: Ref)
{
	inhale forall x:Ref :: x in xs ==> acc(x.f)
	//:: ExpectedOutput(exhale.failed:receiver.not.injective)
	//:: ExpectedOutput(exhale.failed:insufficient.permission)
	exhale forall x: Ref :: x in xs  ==> acc(x.f) && acc(pred1(1))
}

//not injective clause 2s
method test02(xs: Seq[Ref], y: Ref)
{
	//:: ExpectedOutput(exhale.failed:receiver.not.injective)
	//:: ExpectedOutput(exhale.failed:insufficient.permission)
	exhale forall x: Ref :: x in xs  ==> acc(y.f) && acc(pred2(x, 1))
}