field f: Int

predicate pred1(a:Ref) {
	acc(a.f)
}

predicate pred2(a:Ref, i:Int) {
	acc(a.f)
}

//1 argument
method test01(xs: Seq[Ref], y: Ref)
{
	//:: ExpectedOutput(exhale.failed:insufficient.permission)
	//:: ExpectedOutput(exhale.failed:receiver.not.injective)
	exhale forall x: Ref :: x in xs  ==> acc(pred1(y))
}

//2 argument
method test02(xs: Seq[Ref], y: Ref)
{
	//:: ExpectedOutput(exhale.failed:insufficient.permission)
	//:: ExpectedOutput(exhale.failed:receiver.not.injective)
	exhale forall x: Ref :: x in xs  ==> acc(pred2(y, 1))
}

//injective
method test03(xs: Seq[Ref], y: Ref)
{
	//:: ExpectedOutput(exhale.failed:insufficient.permission)
	exhale forall x: Ref :: x in xs ==> acc(pred2(x, 1))
}