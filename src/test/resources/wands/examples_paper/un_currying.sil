/* This example shows how our approach to magic wands can be used to
 * prove the property
 *
 *   A * B --* C   <==>   A --* B --* C
 *
 * We prove both directions independently, both proofs require nested
 * ghost operations. In the "<==" case (method uncurry()) we get to
 * assume the hypothetical LHS A * B while showing the overall wand
 * A * B --* C, and we can therefore subsequently apply the outer and
 * inner wand that we were given (A --* B --* C), which suffices to
 * show the RHS C.
 *
 * The "==>" case is more involved. An initial idea might be to
 * package the inner wand B --* C first, followed by the outer wand
 * A --* B --* C. However, the sequence of statements
 *   package B --* C
 *   package A --* B --* C
 * is doomed to fail because, given only the hypothetical state B, we
 * won't be able to show C in the first statement (note that we
 * cannot apply A * B --* C to get C, because we lack A).
 * The solution is using a packaging-expression nested into a package
 * statement, which yields two hypothetical states (the first
 * satisfying A, the second B), which in turn enables us to apply the
 * given wand A * B --* C.
 */

/* The predicate bodies can be arbitrary since the proofs never unfold
 * the predicates.
 */
predicate P() { true }
predicate Q() { true }
predicate R() { true }

/* Define short-hands for the sake of readability */
define A acc(P())
define B acc(Q())
define C acc(R())

/* A --* B --* C  ==>  A * B --* C */
method uncurry() {
  inhale A --* (B --* C)

  package A && B --* applying (A --* (B --* C)) in (applying (B --* C) in C)

  exhale A && B --* C
}

/* A * B --* C  ==>  A --* B --* C */
method curry() {
  inhale A && B --* C

  package A --* packaging (B --* applying (A && B --* C) in C) in B --* C

  exhale A --* (B --* C)
}
