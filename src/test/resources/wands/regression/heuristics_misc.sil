field __CONFIG_HEURISTICS: Bool

//field f: Ref
//field g: Int
//field h: Int
//
//predicate P(x: Ref, v: Int) { acc(x.g) && x.g == v }
//
//method test01(x: Ref, v: Int) {
//  inhale acc(x.f) && acc(P(x.f, v))
//  inhale x.f != null /* TODO: Should not be necessary */
//
//  assert acc(x.f.g)
//}
//
//method test02(x: Ref) {
//  inhale acc(x.f) && acc(x.f.g)
//  var v: Int := x.f.g
//  x.f.g := x.f.g + 1
//
//  assert acc(P(x.f, v + 1))
//}

/* From the list_insert example */

field val: Int
field next: Ref

predicate List(xs: Ref) {
	acc(xs.val) && acc(xs.next) && (xs.next != null ==> acc(List(xs.next)))
}

method test03() {
  var xs: Ref
  var crt: Ref
  var nxt: Ref

  define A acc(List(crt))
  define B acc(List(xs))

  inhale xs != null && nxt != null
  inhale acc(crt.val) && acc(crt.next)
  inhale nxt == crt.next
  inhale acc(List(nxt))
  inhale A --* B

  wand w := A --* B
  var prev: Ref := crt
  unfold List(nxt)
  crt := nxt
  nxt := nxt.next

  package A --* folding List(prev) in /*applying w in*/ B

  assert acc(crt.val) && acc(crt.next)
  assert nxt == crt.next
  assert nxt != null ==> acc(List(nxt))
  assert A --* B
}
