field f: Ref
field g: Ref
field h: Ref

method test01(x: Ref) {
  //:: ExpectedOutput(package.failed:assertion.false)
  package acc(x.f) --* packaging (acc(x.f) --* false) in acc(x.f) --* false
}

method test02(x: Ref) {
  package acc(x.f) --* packaging (acc(x.f) --* acc(x.f)) in acc(x.f) --* acc(x.f)
  inhale acc(x.f)
  apply acc(x.f) --* acc(x.f) --* acc(x.f)

  //:: ExpectedOutput(apply.failed:insufficient.permission)
  apply acc(x.f) --* acc(x.f)
}

method test03(x: Ref)
  requires acc(x.f)
{
  package acc(x.f) --* packaging (acc(x.f) --* acc(x.f)) in acc(x.f) --* acc(x.f)
  apply acc(x.f) --* acc(x.f) --* acc(x.f)

  //:: ExpectedOutput(apply.failed:insufficient.permission)
  apply acc(x.f) --* acc(x.f)
}

method test04(x: Ref)
  requires acc(x.f) && acc(x.g) && acc(x.h)
{
  package acc(x.f)
            --*
             (acc(x.f)
          && (packaging
                (acc(x.f) && acc(x.g) --* acc(x.f) && acc(x.g) && acc(x.h))
              in
                acc(x.f) && acc(x.g) --* acc(x.f) && acc(x.g) && acc(x.h)))

  assert acc(x.f) && acc(x.g)
  assert acc(x.f) --* (acc(x.f) && (acc(x.f) && acc(x.g) --* acc(x.f) && acc(x.g) && acc(x.h)))

  apply acc(x.f) --* acc(x.f) && (acc(x.f) && acc(x.g) --* acc(x.f) && acc(x.g) && acc(x.h))
  apply acc(x.f) && acc(x.g) --* acc(x.f) && acc(x.g) && acc(x.h)

  assert acc(x.f) && acc(x.g) && acc(x.h)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
