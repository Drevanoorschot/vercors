field f: Int
field g: Int
field h: Bool

predicate P(x: Ref) {
  (acc(x.f, write) && x.f > 0) --* (acc(x.f, write) && acc(x.g, write) && ((x.f) + (x.g) > 0))
}

method test01(x: Ref)
  requires acc(x.f, write) && acc(x.g, write)
{
  define A (acc(x.f, write) && x.f > 0) --* (acc(x.f, write) && acc(x.g, write) && ((x.f) + (x.g) > 0))

  x.f := 1
  x.g := 1
  package A
  fold acc(P(x), write)
  unfold acc(P(x), write)
  apply A
  assert acc(x.g, write) && ((x.f) + (x.g) > 0)
  // wands-silicon issue 1
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/1/)
  assert (x.g) == 1
}

