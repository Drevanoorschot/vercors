field f: Bool

predicate P() { true }

method test1(x: Ref)
  requires acc(x.f) && x.f == true
{
  package true --* acc(x.f) && x.f == true
}

method test2(x: Ref)
  requires acc(x.f) && x.f == true
  requires acc(P())
{
  package true --* acc(x.f) && unfolding acc(P()) in x.f == true
}

method test4(x: Ref)
  requires acc(x.f) && x.f == true
{
  package true --* acc(x.f) && folding acc(P()) in x.f == true
}

method test6(x: Ref)
  requires acc(x.f) && x.f == true
  requires true --* true
{
  package true --* acc(x.f) && applying (true --* true) in x.f == true
}
