var v: Int
var n: Ref

predicate List(this: Ref) {
	acc(this.v, write) && acc(this.n, write) && (this.n != null ==> acc(this.n.List(), write))
}

function sum_rec(this: Ref): Int
	requires acc(this.List(), write)
{ unfolding acc(this.List(), write) in (this.v + (this.n == null ? 0 : sum_rec(this.n))) }

method sum_it(ys: Ref) returns (sum: Int)
  requires ys != null
	requires acc(ys.List(), write)
	ensures acc(ys.List(), write)
	ensures sum == old(sum_rec(ys))
{
  var xs: Ref
  xs := ys
  sum := 0

  letass A := (xs != null) ==> (acc(xs.List(), write) && sum_rec(xs) == pold(sum_rec(xs)))
  letass B := acc(ys.List(), write) && sum_rec(ys) == old(sum_rec(ys))

  package A --* B

  while (xs != null)
    invariant ((xs != null) ==> acc(xs.List(), write))
    invariant sum == (old(sum_rec(ys)) - (xs == null ? 0 : sum_rec(xs)));
    invariant A --* B
  {
    /* ghost */ var prev_xs: Ref
                prev_xs := xs

    unfold acc(xs.List(), write)
    sum := sum + (xs.v)
    xs := xs.n;

    package
      A
        --*
      folding acc(prev_xs.List(), write) in
        (applying
          (((prev_xs != null) ==> (acc(prev_xs.List(), write) && sum_rec(prev_xs) == pold(sum_rec(prev_xs))))
            --*
          B)
        in
          B);
  }

  apply A --* B
}
