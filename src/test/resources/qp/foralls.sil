var f: Int

predicate P01(xs: Set[Ref]) {
  forall x: Ref :: x in xs ==> acc(x.f, write)
}

method test01(xs: Set[Ref], a: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.f, write)
  requires a in xs
{
  var oa: Int := a.f

  a.f := oa + 1

  assert a.f != oa

  fold P01(xs)
  unfold P01(xs)

  assert a.f > oa
}

method test02(xs: Set[Ref], a: Ref, b: Ref)
  requires forall x: Ref :: x in xs ==> acc(x.f, write)
  requires a in xs && b in xs
  ensures forall x: Ref :: x in xs ==> acc(x.f, write)
  ensures a != b ? b.f < a.f : a.f == b.f
{
  a.f := b.f + 1

  fold P01(xs)
  unfold P01(xs)

  assert a == b || a.f > b.f
}

predicate P02(xs: Set[Ref], a: Ref) {
  (forall x: Ref :: x in xs ==> acc(x.f, write)) && a in xs
}