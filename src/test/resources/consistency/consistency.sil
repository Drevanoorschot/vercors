field f: Int
field r: Ref

method epstest(x: Ref)
  //:: ExpectedOutput(internal:feature.unsupported)
  requires acc(x.f, epsilon)
{}

predicate recpred(x: Ref) {
  acc(x.f) && acc(x.r) && (x.r != null ==> acc(recpred(x.r)) && unfolding acc(recpred(x.r)) in x.r.f != 0)
}

method use_recpred(x: Ref)
  requires acc(recpred(x))
{
  var v: Int := unfolding acc(recpred(x)) in x.f
}

method unsupported_qps(xs: Seq[Ref], hi: Int, lo: Int) {
  // This is now supported (at least, in Silver) - Silicon should nonetheless reject it until the merged changes have happened
  inhale forall i: Int :: lo <= i && i < hi ==> acc(xs[i].f) && true
  //:: ExpectedOutput(internal:feature.unsupported)
  //:: MissingOutput(internal:feature.unsupported, /Silver/issue/175/)
  inhale forall i: Int, j:Int :: lo <= i && i < j ==> acc(xs[i].f) && true
}
