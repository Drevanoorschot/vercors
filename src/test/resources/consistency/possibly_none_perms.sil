field f: Int

method test01(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  var a: Int := x.f // Should fail!
}

method test02(x: Ref, b1: Bool, b2: Bool)
  requires acc(x.f, 1/5)
{
  var a1: Int := x.f
  
  exhale acc(x.f, b1 ? 1/5 : none)
  inhale acc(x.f, 1/5)
  assert true
  var a2: Int := x.f
  
  exhale acc(x.f, b2 ? 1/5 : none)
  inhale acc(x.f, 1/5)
  assert true
  var a3: Int := x.f
  
  assert a1 == a3 || a1 == a2 || a2 == a3 // Should fail!
  assert !b1 ==> a1 == a2 && a2 == a3
  assert !b2 ==> a2 == a3
}

method test03(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  exhale acc(x.f, wildcard) // Should fail!
  
  assert !b ==> false
}

method permarg(k: Perm) {}

method test04(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  var k: Perm
  fresh k
  constraining(k) {
    permarg(k) // Should fail!
  }
}

method test05(x: Ref, b: Bool)
  requires acc(x.f, b ? write : none)
{
  var k: Perm
  fresh k
  constraining(k) {
    exhale acc(x.f, k) // Should fail!
  }
  
  assert !b ==> false
}
