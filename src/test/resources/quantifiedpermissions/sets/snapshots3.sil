var n:Set[Ref]

var f:Int

predicate inv(this:Ref) {
	acc(this.n, write) &&
	forall x : Ref :: x in this.n ==> acc(x.f, write) 
}

method m1(this:Ref)
requires acc(inv(this), write)
ensures acc(inv(this), write)
{
	unfold acc(inv(this), write)
	var t:Ref
	assume t in this.n
	var a:Int := t.f
	fold acc(inv(this), write)
	//unfold acc(inv(this), write)
	//assert a == t.f
	
}