field val: Int

domain IArray {
  function lookup(a: IArray, i: Int): Ref

  axiom all_diff {
    forall a1: IArray, a2: IArray, i: Int, j: Int :: {lookup(a1, i), lookup(a2, j)}
      (a1 != a2 || i != j) ==> lookup(a1, i) != lookup(a2, j)
  }
}

//method test01(a: IArray, n: Int)
//  requires n > 5
//  requires forall i: Int :: i in [0..n) ==> acc(lookup(a, i).val)
//  ensures  forall i: Int :: i in [0..n) ==> acc(lookup(a, i).val)
//  ensures  lookup(a, 1).val == lookup(a, 0).val + old(lookup(a, 1).val)
//{
//  lookup(a, 1).val := lookup(a, 0).val + lookup(a, 1).val
//}

method test02(a1: IArray, a2: IArray, n: Int)
  requires a1 != a2
  requires forall i: Int :: i in [0..n) ==> acc(lookup(a1, i).val, 1/3)
  requires forall i: Int :: i in [0..n) ==> acc(lookup(a2, i).val, 1/3)
{
  assert forall i: Int :: i in [0..n) ==> lookup(a1, i) != lookup(a2, i)
}
