field f: Int

function fun01(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| && j == i ==> acc(xs[j].f, write)

method test01(xs: Seq[Ref])
  requires 10 < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f)
{
  var x0: Int := fun01(xs, 0)
  var x3: Int := fun01(xs, 3)

  xs[3].f := 0

  assert fun01(xs, 0) == x0

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert fun01(xs, 3) == x3
}

function fun02(xs: Seq[Ref], i: Int): Int
  requires 0 <= i && i < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f, j == i ? write : none)

method test02(xs: Seq[Ref])
  requires 10 < |xs|
  requires forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].f)
{
  var x0: Int := fun02(xs, 0)
  var x3: Int := fun02(xs, 3)

  xs[3].f := 0

  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/205/)
  assert fun02(xs, 0) == x0

  //:: ExpectedOutput(assert.failed:assertion.false)
  //:: MissingOutput(assert.failed:assertion.false, /silicon/issue/34/)
  assert fun02(xs, 3) == x3
}