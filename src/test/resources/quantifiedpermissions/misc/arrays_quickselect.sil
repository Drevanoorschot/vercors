field val: Int

domain IArray {
  function lookup(a: IArray, i: Int): Ref

  axiom all_diff {
    forall a1: IArray, a2: IArray, i: Int, j: Int :: {lookup(a1, i), lookup(a2, j)}
      (a1 != a2 || i != j) ==> lookup(a1, i) != lookup(a2, j)
  }
}

// https://en.wikipedia.org/wiki/Quickselect

//function partition(list, left, right, pivotIndex)
//     pivotValue := list[pivotIndex]
//     swap list[pivotIndex] and list[right]  // Move pivot to end
//     storeIndex := left
//     for i from left to right-1
//         if list[i] < pivotValue
//             swap list[storeIndex] and list[i]
//             increment storeIndex
//     swap list[right] and list[storeIndex]  // Move pivot to its final place
//     return storeIndex
