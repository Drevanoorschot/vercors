field f: Int
field g: Ref

method test01(x1: Ref, x2: Ref)
  requires acc(x1.g) && acc(x1.g.f)
  requires acc(x2.g) && acc(x2.g.f)
  ensures  forall x: Ref :: x in Set(x1, x2) ==> acc(x.g)
  // Previously: UnexpectedOutput(postcondition.violated:receiver.not.injective, /silicon/issue/149/)
  ensures  forall x: Ref :: x in Set(x1, x2) ==> acc(x.g.f)
{
//  assert x1 != x2       // Any of these two assert makes ...
//  assert x1.g != x2.g   // ... the postcondition verify
}

method test02(x1: Ref, x2: Ref)
  requires acc(x1.g) && acc(x1.g.f, 2/3)
  requires acc(x2.g) && acc(x2.g.f, 2/3)
  ensures  forall x: Ref :: x in Set(x1, x2) ==> acc(x.g, 2/3)
  // Previously: UnexpectedOutput(postcondition.violated:receiver.not.injective, /silicon/issue/149/)
  ensures  forall x: Ref :: x in Set(x1, x2) ==> acc(x.g.f, 2/3)
{
//  assert x1 != x2       // Any of these two assert makes ...
//  assert x1.g != x2.g   // ... the postcondition verify
}

method test03(xs: Seq[Ref])
  requires |xs| < 10
  requires forall i: Int :: 0 < i && i < |xs| ==> acc(xs[i].g, 2/3)
  requires forall i: Int :: 0 < i && i < |xs| ==> acc(xs[i].g.f)
  ensures xs[0] != xs[1]
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/149/)
  assert xs[0] != xs[1]
}
