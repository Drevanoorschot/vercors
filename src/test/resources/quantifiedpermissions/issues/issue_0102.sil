field f: Int

method test1(xs: Seq[Ref], n: Int, b: Bool)
  requires |xs| == n
  requires n > 2
{
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, write)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, write)
}

method test2(xs: Seq[Ref], n: Int, b: Bool)
  requires |xs| == n
  requires n > 2
{
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, write)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, 1/2)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, 1/2)
}

method test3(xs: Seq[Ref], n: Int, b: Bool)
  requires |xs| == n
  requires n > 2
{
  inhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, i < 2 ? write : 1/10)
  //:: UnexpectedOutput(exhale.failed:insufficient.permission, /silicon/issue/102/)
  exhale forall i: Int :: i in [0..n) ==> acc(xs[i].f, i < 2 ? write : 1/10)
}


field value: Int
field array: Seq[Ref]

method test4(this: Ref, n: Int)
  requires acc(this.array)
  requires n > 2
  requires |this.array| == n
  ensures acc(this.array, wildcard)
  ensures |this.array| == n
  ensures forall i:Int :: i in [0..n) ==> acc(this.array[i].value, 1/2)
  //:: ExpectedOutput(postcondition.violated:assertion.false)
  ensures false
{
  var x: Int

  inhale forall i:Int :: i in [0..n) ==> acc(this.array[i].value, write)

  x := this.array[0].value

  this.array[0].value := 1

  var r: Ref
  inhale r == this.array[1]
  r.value := 2

  this.array[0].value := -1
  this.array[1].value := -2

  this.array[2].value := 3
}
