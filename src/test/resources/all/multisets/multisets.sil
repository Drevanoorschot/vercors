method test01() {
  var B1: Multiset[Int]
  var B2: Multiset[Int]
  B1 := Multiset(1)
  B2 := Multiset(1, 1)

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert B1 == B2
}

method test02() {
  var B: Multiset[Int] := Multiset(1,2,3,3,1)
  assert |B| == 5
  assert |Multiset[Int]()| == 0
}

method test03(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
  requires x in B
  requires y in B
{
  var B1: Multiset[Int] := B setminus Multiset[Int]()
  assert x in B1
  assert y in B1
  assert |B1| == n
}

method test04a(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
  requires x in B
  requires y in B
  requires x != y
{
  var B1: Multiset[Int] := B setminus Multiset(x)
  assert y in B1
  assert |B1| == n - 1
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x in B1
}

/* Copy of test04a with some lines commented */
method test04b(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
  requires x in B
//  requires y in B
  requires x != y
{
  var B1: Multiset[Int] := B setminus Multiset(x)
  assert |B1| == n - 1

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert x in B1
}

method test05(B: Multiset[Int], n: Int, x: Int)
  requires |B| == n
{
  var B1: Multiset[Int] := B union B
  assert x in B1 <==> x in B
  assert |B1| == 2*n
}

method test06(B: Multiset[Int], n: Int, x: Int, b:Bool)
  requires |B| == n
{
  var B1: Multiset[Int] := B intersection B
  if(b) {
    // NOTE: cardinality for multisets has no strong axioms, but equality can be used
    assert B1 == B
    assert |B1| == n
  } else {
    // NOTE: cardinality for multisets has no strong axioms
    //:: ExpectedOutput(assert.failed:assertion.false)
    assert |B1| == n
    assert B1 == B
  }
}

method test07(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
{
  var B1: Multiset[Int] := B union Multiset(x, y)
  assert x in B1
  assert y in B1
  assert |B1| == n + 2
}

method test08(B: Multiset[Int], n: Int, x: Int, y: Int)
  requires |B| == n
{
  var B1: Multiset[Int] := B intersection Multiset(x, y)
  assert x in B1 <==> x in B
  // NOTE: cardinality for multisets has no strong axioms
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert |B1| <= 2
}
