
// var test: Bool

// // some random tests
// method t1(this: Ref, a: Int, b: Bool, g: Ref) returns (c: Bool, d: Int)
    // requires b && acc(this.value, write)
    // ensures (d == 1) || (d == 2)
// {
    // var e: Int
    // var f1: Ref
    // var f2: Ref
    // this.value := 1
    // f1 := new()
    // f2 := new()
    // if (g != null) {
        // exhale g != f1
    // }
    // exhale this.value <= 42
    // exhale f1 != f2
    // inhale (a == -11)
    // exhale a < 0
    // d := 2
    // if (b) {
        // d := 1
    // } else {
        // d := 3
    // }
// }

// var value: Int

// // test aliasing information of newly created objects
// method t2(a: Ref, b: Ref) returns ()
// {
    // var l1: Ref
    // var l2: Ref
    // l1 := new()
    // l2 := new()
    // exhale a != l1
    // exhale l1 != l2
    // //:: ExpectedError(assertion.false)
    // exhale a != b
// }

// // test aliasing information of parameters 1
// method t3(a: Ref, b: Ref) returns ()
// {
    // if (a == null) {
        // //:: ExpectedError(assertion.false)
        // exhale a != b
        // if (b != null) {
            // exhale a != b
        // }
    // }
// }

// // test aliasing information of parameters 2
// method t4(a: Ref, b: Ref) returns ()
// {
    // if (a == null) {
        // if (b != null) {
            // exhale a != b
        // }
    // }
// }

domain L {
  function f1(x: Int): Int
  function f2(x: Int): Int
}

// test trigger parsing
method t5() returns ()
{
    assume forall i: Int :: {f1(i),f2(i)} f1(i) > 0
}

domain Foo[A] {
  function foo(a: A): Int
  function fooid(a: A): A

  axiom foo_ax1 {forall a: A :: foo(a) > 0 }
  axiom foo_ax2 {forall a: A :: fooid(a) == a }
}

method t6() {
  assert foo(1) > 0
  assert foo(null) > 0
  assert foo(none) > 0
}

domain Bar[A, B] {
  function barfoo1(a: A): Bool
  function barfoo2(a: A): Int

  axiom bar_ax1 {forall a: A :: barfoo1(a) == true}
  axiom bar_ax2 {forall b: B :: barfoo1(null) == true}
  axiom bar_ax3 {forall a: A :: barfoo2(a) != hide(a)}
}

domain Hidden[A] {
  function hide(a: A): Int

  axiom hidden_ax1 {forall a: A :: hide(a) == 0}
}

method test7() {
  assert barfoo2(101) != 0
}

domain D10A[A] {
  function hide2(a: A): Int
}

domain D10B {
  axiom d10b_ax1 {forall x: Int :: hide2(x) > 0}
}

domain D10C[A] {
  axiom d10c_ax1 {forall r: Ref :: hide2(r) < 0}
}

method test8() {
  assert hide2(101) > 0
  assert hide2(null) < 0
}

domain Cell[A] {
  function Cell_cell(a: A): Cell[A]
}

method test9() {
  assert Cell_cell(0) == Cell_cell(0)
}