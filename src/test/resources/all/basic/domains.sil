
domain List[T] {
    function nil(): List[T]
    function cons(x: T, xs: List[T]): List[T]
    function length(xs: List[T]): Int
    axiom nil_length {
        length(nil()) == 0
    }
    axiom cons_length {
        forall x: T :: forall xs: List[T] :: length(cons(x, xs)) == (length(xs) + 1)
    }
    axiom nil_cons {
        forall z: T :: forall zs: List[T] :: cons(z, zs) != nil()
    }
}

method test(x: Int, xs: List[Int]) {
    var n: List[Int] := nil()
    assert length(n) == 0
    assert n != cons(x, xs)
    assert length(cons(1, n)) == 1
}

domain Pair[A, B] {
	function Pair_pair(a: A, b: B): Pair[A, B]

	function Pair_first(p: Pair[A, B]): A
	function Pair_second(p: Pair[A, B]): B

  axiom Pair_access_first { forall a: A, b: B :: Pair_first(Pair_pair(a, b)) == a }
	axiom Pair_access_second { forall a: A, b: B :: Pair_second(Pair_pair(a, b)) == b }
}

domain Triple[A, B, C] {
	function Triple_triple(a: A, b: B, c: C): Triple[A, B, C]

	function Triple_first(t: Triple[A, B, C]): A
	function Triple_second(t: Triple[A, B, C]): B
	function Triple_third(t: Triple[A, B, C]): C

	function Triple_isPrefix(p: Pair[A, B], t: Triple[A, B, C]): Bool

	axiom Triple_access_first { forall a: A, b: B, c: C :: Triple_first(Triple_triple(a, b, c)) == a }
	axiom Triple_access_second { forall a: A, b: B, c: C :: Triple_second(Triple_triple(a, b, c)) == b }
	axiom Triple_access_third { forall a: A, b: B, c: C :: Triple_third(Triple_triple(a, b, c)) == c }

	axiom Triple_is_prefix {
	  forall p: Pair[A, B], t: Triple[A, B, C] ::
	    Triple_isPrefix(p, t) ==
	         (Pair_first(p) == Triple_first(t))
	      && (Pair_second(p) == Triple_second(t))
  }
}

method test2(a: Int, b: Bool) {
  assert Pair_first(Pair_pair(a, b)) == a
  assert Pair_second(Pair_pair(a, b)) == b

  var b2: Bool := true
  assert Pair_second(Pair_pair(a, b)) == b2
}

method test3(a: Int, b: Bool, c: Ref) {
  assert Triple_first(Triple_triple(a, b, c)) == a
  assert Triple_second(Triple_triple(a, b, c)) == b
  assert Triple_third(Triple_triple(a, b, c)) == c

  var b2: Bool := true
  assert Triple_second(Triple_triple(a, b, c)) == b2
}

method test4(a: Int, b: Bool, c: Ref) {
  var p: Pair[Int, Bool] := Pair_pair(a, b)
  var t: Triple[Int, Bool, Ref] := Triple_triple(a, b, c)
  assert Triple_isPrefix(p, t)

  var t2: Triple[Int, Ref, Bool] := Triple_triple(a, c, b)
  assert Triple_isPrefix(p, t)
}
