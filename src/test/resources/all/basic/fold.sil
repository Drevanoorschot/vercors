
var f: Int

predicate valid(r: Ref) {
    acc(r.f, write) && ((r.f) == 0)
}

method t1(r: Ref) returns ()
    requires acc(r.f, write)
{
    r.f := 0
    fold acc(valid(r), write)
    unfold acc(valid(r), write)
    //:: ExpectedError(assert.failed:assertion.false)
    assert false
}

method t2(r: Ref) returns ()
    requires acc(r.f, write)
{
    r.f := 1
    //:: ExpectedError(fold.failed:assertion.false)
    fold acc(valid(r), write)
}

method t3(r: Ref) returns ()
    requires acc(r.f, write)
{
    r.f := 1
    //:: ExpectedError(unfold.failed:insufficient.permission)
    unfold acc(valid(r), write)
}
