
field f: Ref

// test aliasing of heap values with other objects
method t1() {
    var a: Ref
    var c: Ref

    inhale acc(a.f, write)

    c := new(f)

    assert c.f != c

    assume a != null
    set_f(a, c)

    //:: ExpectedOutput(assert.failed:assertion.false)
    assert a.f != c
}

method set_f(monitor: Ref, value: Ref)
  requires acc(monitor.f, write)
  requires monitor != null && value != null
  ensures acc(monitor.f, write)
{
  monitor.f := value
}

method t2(r: Ref) {
  if (r != null) {
    assert perm(r.f) == none
  } else {
    //:: ExpectedOutput(assert.failed:receiver.null)
    assert perm(r.f) == none
  }
}
