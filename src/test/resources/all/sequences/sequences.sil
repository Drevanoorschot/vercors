
method t1(x: Int, xs: Seq[Int]) {
    var n: Seq[Int] := Seq[Int]()
    assert |n| == 0
    assert n != Seq(x)
    assert |Seq(1)| == 1
}

method t2() {
    assert 1 in Seq(1,2,3)
    assert |[-1..10)| == 11
    assert Seq(1) ++ Seq(2) == Seq(1,2)

    var a: Seq[Int] := Seq(0,1,-11,22)
    assert a[2] == -11

    assert a[..1] == Seq(0)
    assert a[1..] == Seq(1,-11,22)
    assert a[1..2] == Seq(1)

    assert a[1 := 22] == (a[1 := -1][1 := 22])
    assert a[1 := 22] == Seq(0,22,-11,22)
}

method test3() {
  var xs: Seq[Int] := Seq(0, 1, 2, 3, 4, 5, 6, 7)
  var bs: Seq[Bool] := Seq(true, true, false, true) ++ Seq(false, true)

  assert |xs[1..][..6]| == |bs|
}

method test4(s:Seq[Int], i : Int, j:Int) 
  requires 0 <= i
  requires i <= j
{
  assert s == s[..i] ++ s[i..]
  assert s == s[..i] ++ s[i..j] ++ s[j..]
}

method test5(s:Seq[Int], i : Int, j:Int) 
{
  //:: UnexpectedOutput(assert.failed:assertion.false, /silicon/issue/129/)
  //:: UnexpectedOutput(assert.failed:assertion.false, /carbon/issue/36/)
  assert s == s[..i] ++ s[i..]
}