  var n: Ref
  predicate P(this: Ref) { acc(this.n, write) && (((this.n) != (null)) ==> acc(this.n.P, write)) }
  function length(this: Ref): Int
    requires acc(this.P, write)
    ensures result >= 1
  { (unfolding acc(this.P, write) in 1 + (((this.n) == (null)) ? 0 : length(this.n))) }
  method test(this: Ref, node: Ref)
    requires ((node) != (null))
    requires acc(node.P, write)
  {
    assert (length(node) >= 1)
    //assert (unfolding acc(node.P, rd) in (((node.n) == (null))) ==> ((length(node)) == (1)))
    //assert (unfolding acc(node.P, rd) in (((node.n) != (null))) ==> ((length(node)) > 1))
    //assert ((length(node)) == (1)) ==> (unfolding acc(node.P, rd) in ((node.n) == (null)))
    //assert ((length(node)) == (1)) <==> (unfolding acc(node.P, rd) in ((node.n) == (null)))
  }
