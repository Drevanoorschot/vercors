  var x: Int
  var y: Int
  var z: Int
  var w: Int
  predicate X(this: Ref) { acc(this.x, write) }
  predicate Y(this: Ref) { acc(this.y, write) }
  predicate Z(this: Ref) { acc(this.z, write) }
  function getX(this: Ref): Int
    requires acc(this.X(), write)
  { (unfolding acc(this.X(), write) in this.x) }
  function getY(this: Ref): Int
    requires acc(this.Y(), write)
  { (unfolding acc(this.Y(), write) in this.y) }
  function getZ(this: Ref): Int
    requires acc(this.Z(), write)
  { (unfolding acc(this.Z(), write) in this.z) }
  method setX(this: Ref, v: Int)
    requires acc(this.X(), write)
    ensures acc(this.X(), write) && ((getX(this)) == (v))
  {
    unfold acc(this.X(), write)
    this.x := v
    fold acc(this.X(), write)
  }
  method check(this: Ref)
    requires acc(this.x, write) && acc(this.y, write) && acc(this.z, write) && acc(this.w, write)
    ensures acc(this.y, write) && ((this.y) == (2)) && acc(this.X(), write) && ((getX(this)) == (3)) && acc(this.Z(), write) && ((getZ(this)) == (4)) && acc(this.w, write) && ((this.w) == (10))
  {
    this.x := 1
    this.y := 2
    this.z := 4
    this.w := 10
    fold acc(this.X(), write)
    fold acc(this.Y(), write)
    fold acc(this.Z(), write)
    setX(this, 3);
    unfold acc(this.Y(), write)
  }
  method check1(this: Ref)
    requires acc(this.X(), write) && acc(this.y, write) && ((this.y) == (1))
    ensures acc(this.y, write) && ((this.y) == (1)) && acc(this.X(), write) && ((getX(this)) == (200))
  {
    setX(this, 10);
    fold acc(this.Y(), write)
    setX(this, 100);
    unfold acc(this.Y(), write)
    fold acc(this.Y(), write)
    unfold acc(this.Y(), write)
    setX(this, 200);
  }
