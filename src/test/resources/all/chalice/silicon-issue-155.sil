// chaliceSuite/general-tests/triggers.chalice
domain GlobalKPermission {

  unique function globalK$(): Perm

  axiom globalKReadOnly {
    (globalK$() > none) && (write > globalK$())
  }
}

field old$methodPermission: Perm

field joinable$: Bool

field Triggersnext$: Ref

field par$Triggerstriggers_six$this$_3: Ref

field par$Triggerstriggers_six$k$: Perm

field par$Triggerstriggers_six$c: Int

field par$Triggerstriggers_six$d: Int

function Triggersi$(this$_2: Ref, x: Int, y: Bool): Bool
  requires this$_2 != null
  requires acc(Triggersvalid$(this$_2), wildcard)
{
  (unfolding acc(Triggersvalid$(this$_2), wildcard) in Triggersi$(this$_2.Triggersnext$, x, y))
}

predicate Triggers$MonitorInvariant(this$: Ref) {
  true
}

predicate Triggersvalid$(this$_1: Ref) {
  acc(this$_1.Triggersnext$, write) && (this$_1.Triggersnext$ != null) && acc(Triggersvalid$(this$_1.Triggersnext$), write)
}

method Triggerstriggers_six$(this$_3: Ref, k$: Perm, c: Int, d: Int)
  requires this$_3 != null
  requires k$ > none
  requires write > k$
  requires c > d
  requires acc(Triggersvalid$(this$_3), write)
  requires (forall x: Int :: true ==> Triggersi$(this$_3, x, c > d))
  ensures acc(Triggersvalid$(this$_3), write)
  //:: UnexpectedOutput(postcondition.violated:assertion.false, /Silicon/issue/155/)
  ensures Triggersi$(this$_3, 4, true)
{
  var n$: Ref
  var a$: Ref
  var b$: Ref
  var c$: Ref

}
