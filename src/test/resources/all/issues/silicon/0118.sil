field Nodev$: Int

field Noden$: Ref

field Listc$: Ref

function Nodelen$(this$_2: Ref): Int
  requires this$_2 != null
  requires acc(Nodeinv$(this$_2), wildcard)
  ensures result > 0
{
  (unfolding acc(Nodeinv$(this$_2), wildcard) in (this$_2.Noden$ == null ? 1 : 1 + Nodelen$(this$_2.Noden$)))
}

function Nodeget$(this$_3: Ref, i: Int): Int
  requires this$_3 != null
  requires acc(Nodeinv$(this$_3), wildcard) && (0 <= i) && (i < Nodelen$(this$_3))
{
  (unfolding acc(Nodeinv$(this$_3), wildcard) in (i == 0 ? this$_3.Nodev$ : Nodeget$(this$_3.Noden$, i - 1)))
}

function Listlen$(this$_9: Ref): Int
  requires this$_9 != null
  requires acc(Listinv$(this$_9), wildcard)
  ensures result >= 0
{
  (unfolding acc(Listinv$(this$_9), wildcard) in (this$_9.Listc$ == null ? 0 : Nodelen$(this$_9.Listc$)))
}

predicate Nodeinv$(this$_1: Ref) {
  acc(this$_1.Nodev$, write) && acc(this$_1.Noden$, write) && ((this$_1.Noden$ != null) ==> acc(Nodeinv$(this$_1.Noden$), write))
}

predicate Listinv$(this$_8: Ref) {
  acc(this$_8.Listc$, write) && ((this$_8.Listc$ != null) ==> acc(Nodeinv$(this$_8.Listc$), write))
}
