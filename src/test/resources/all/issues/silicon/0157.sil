field f: Ref
field g: Bool /* Must be a finite domain, Int didn't trigger the bug */

method test04(x: Ref)
  requires acc(x.f) && x.f != null && acc(x.f.g) && x.f.g
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false /* Held previously */
}

method test01(x: Ref)
  requires acc(x.f) && x.f != null
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test02(x: Ref)
  requires acc(x.f, 1/2) && x.f != null && acc(x.f, 1/2)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test03(x: Ref)
  requires acc(x.f) && x.f != null && acc(x.f.g)
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test05(x: Ref)
  requires acc(x.f) && acc(x.f.g) && x.f.g
{
  assert x.f != null

  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method test06(x: Ref)
  requires acc(x.f) && x.f != null
  requires acc(x.f.g) && x.f.g
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}


/* Code submitted alongside the issue */

field Testtk$: Ref
field joinable$: Bool

method TestBug(this$_3: Ref, k$_1: Perm)
  requires acc(this$_3.Testtk$, write) && (this$_3.Testtk$ != null) && acc(this$_3.Testtk$.joinable$, write) && this$_3.Testtk$.joinable$
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}

method TestBug1(this$_3: Ref, k$_1: Perm)
  requires acc(this$_3.Testtk$, write) && (this$_3.Testtk$ != null)
  requires acc(this$_3.Testtk$.joinable$, write) && this$_3.Testtk$.joinable$
{
  //:: ExpectedOutput(assert.failed:assertion.false)
  assert false
}
