var f: Int
var g: Int

method test01(x: Ref, y: Ref, z: Ref)
	requires acc(x.f, write) && acc(y.f, write)
	requires (z == x || z == y)
{
	assert acc(z.f, write)
	assert acc(x.f, write)
	assert acc(y.f, write)
}

method test05(x: Ref, y: Ref, z: Ref)
	requires acc(x.f, write) && acc(y.f, write)
	requires (z == x || z == y)
{
	exhale acc(z.f, write)
	exhale acc(x.f, write) && acc(y.f, write)
}

method test03(b: Bool, x: Ref, y: Ref)
	requires acc(x.f, b ? (1/5) : none)
	requires acc(y.f, !b ? (1/5) : none)
{
	// :: ExpectedError(:insufficient.permission)
	x.f := 1
}

method test04(b: Bool, x: Ref, y: Ref)
	requires acc(x.f, b ? (1/5) : none)
	requires acc(y.f, !b ? (1/5) : none)
{
	if (x == y) {
		exhale acc(x.f, (1/5))
	}
}

method test06(b: Bool, x: Ref, y: Ref)
	requires acc(x.f, b ? (1/5) : none)
	requires acc(y.f, !b ? (1/5) : none)
{
	exhale (x == y) ==> acc(x.f, (1/5))
}

method test02(x: Ref, y: Ref, z: Ref, a: Ref)
	requires acc(x.f, (1/3)) && acc(y.f, (1/3)) && acc(z.f, (1/6))
	requires (a == x && a == y) || (a == z)
{
	exhale acc(a.f, (1/5))
	
	assert acc(x.f, wildcard)
	assert acc(y.f, wildcard)
	assert acc(z.f, wildcard)
	
	exhale acc(z.f, (1/1))
	
	if (a != x) {
		exhale acc(x.f, (1/3)) && acc(x.f, (1/3))
	} else {
		exhale acc(z.f, (1/5))
	}
	
	if (a == z && a != x && a != y) {
		assert acc(x.f, (1/3)) && acc(y.f, (1/3))
	}
}