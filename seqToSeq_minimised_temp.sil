//  a field
field item: Int

function seqToSeqHelper(xs: Seq[Ref], i: Int): Seq[Int]
  requires 0 <= i && i <= |xs|
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))

  ensures |result| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> result[j - i] == xs[j].item)
{
  (i < |xs| ? Seq(xs[i].item) ++ seqToSeqHelper(xs, i + 1) : Seq[Int]())
}

method method_seqToSeqHelper(xs: Seq[Ref], i: Int) returns (res: Seq[Int])
  requires 0 <= i && i <= |xs|
  requires (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))
  ensures 0 <= i && i <= |xs|
  ensures (forall j: Int :: 0 <= j && j < |xs| ==> acc(xs[j].item, wildcard))

  ensures |res| == |xs| - i
  ensures (forall j: Int :: i <= j && j < |xs| ==> res[j - i] == xs[j].item)
{
  if (i < |xs|) {
    var tail: Seq[Int]
    // tail := seqToSeqHelper(xs, i + 1) // with this instead of the line below, both methods fail
    tail := method_seqToSeqHelper(xs, i + 1)
    res := Seq(xs[i].item) ++ tail
  } else {
    res := Seq()
  }
}
