name: 'Run ScalaTest'
# Only run the workflow when pushed to master, dev, or on pull requests.
on: 
  push:
    branches:
      - '**'
    tags-ignore: 
      - dev-prerelease
  pull_request:
    branches:
      - '**'
jobs:
  SkipDuplicate:
    runs-on: ubuntu-latest
    # Map a step output to a job output
    outputs:
      should_skip: ${{ steps.skip_check.outputs.should_skip }}
    steps:
      - name: Check for duplicate workflow run
        id: skip_check
        uses: fkirc/skip-duplicate-actions@master
        with:
          # Never allow two runs of this workflow to exist
          concurrent_skipping: 'always'
          # Except, never skip a PR, scheduled, or manually dispatch run
          do_not_skip: '["pull_request", "workflow_dispatch", "schedule"]'
          # Skip if we can find a duplicate run with the same everything
          skip_after_successful_duplicate: 'true'
          # Do not run on changes only to these files
          paths_ignore: '["**/README.md", "**/LICENSE*"]'

  Compile:
    runs-on: ubuntu-latest
    needs: SkipDuplicate
    if: ${{ needs.SkipDuplicate.outputs.should_skip != 'true' }}

    steps:
    - name: Checkout VerCors
      uses: actions/checkout@v2
    - name: Install Java
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Cache SBT and Viper
      uses: cache
      with:
        path: |
          ~/.cache/coursier
          ~/.ivy2/cache
          ~/.sbt
        key: sbt-viper-ubuntu-latest-${{ hashFiles('project/build.properties') }}-${{ hashFiles('build.sbt') }}
        restore-keys: |
          sbt-viper-ubuntu-latest-${{ hashFiles('project/build.properties') }}
    - name: Compile
      run: sbt pushRemoteCache
    - name: Upload precompiled repository
      uses: actions/upload-artifact@v3
      with:
        name: precompiled-repository
        path: tmp/vercors-build-cache

  ScalaTest:
    needs: "Compile"

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest] # , windows-latest, macos-latest]
        batch: ["-n MATRIX[0]", "-n MATRIX[1]", "-n MATRIX[2]", "-n MATRIX[3]", "-n MATRIX[4]", "-n MATRIX[5]", "-n MATRIX[6]", "-n MATRIX[7]", "-l MATRIX"]

    runs-on: ${{matrix.os}}
    environment: Default
    steps:
      - name: Checkout VerCors
        uses: actions/checkout@v2
      - name: Install Java
        uses: actions/setup-java@v1
        with:
          java-version: 11
      - name: Cache SBT and Viper
        uses: cache
        with:
          path: |
            ~/.cache/coursier
            ~/.ivy2/cache
            ~/.sbt
          key: sbt-viper-${{ matrix.os }}-${{ hashFiles('project/build.properties') }}-${{ hashFiles('build.sbt') }}
          restore-keys: |
            sbt-viper-ubuntu-latest-${{ hashFiles('project/build.properties') }}
      - name: Download precompiled repository
        uses: actions/download-artifact@v3
        with:
          name: precompiled-repository
          path: tmp/vercors-build-cache
      - name: Pull cached compilation into sbt
        run: sbt pullRemoteCache compile

      # Windows: LLVM/Clang
      - name: Cache LLVM and Clang (windows)
        if: matrix.os == 'windows-latest'
        id: cache-llvm
        uses: actions/cache@v2
        with:
          path: ${{ runner.temp }}/llvm
          key: llvm-10.0
      - name: Install LLVM and Clang (windows)
        if: matrix.os == 'windows-latest'
        uses: KyleMayes/install-llvm-action@v1
        with:
          version: "10.0"
          directory: ${{ runner.temp }}/llvm
          cached: ${{ steps.cache-llvm.outputs.cache-hit }}

      # MacOS: LLVM/Clang
      - name: Install clang (mac)
        if: matrix.os == 'macos-latest'
        run: brew install llvm

      - name: Run scalatest for label ${{matrix.batch}}
        run: sbt "testOnly vct.* -- ${{matrix.batch}}"
        continue-on-error: true
      - name: Test Report
        uses: dorny/test-reporter@v1
        with:
          name: TestReport vct           # Name of the check run which will be created
          path: '**/target/test-reports/TEST-*.xml'    # Path to test results
          reporter: java-junit