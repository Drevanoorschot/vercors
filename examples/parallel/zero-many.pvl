// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases ZeroMultiple
//:: tools silicon
//:: verdict Pass
class ZeroMany {
  int x;

  invariant ar != null && matrix != null;
  requires M>=0 && N>=0;
  requires Perm(x,1);
  requires (\forall* int i;0 <= i && i < N ; Perm(ar[i],write));
  requires (\forall* int i1 ; 0 <= i1 && i1 < M ;
             (\forall* int j1 ; 0 <= j1 && j1 < N ;
               Perm(matrix[i1][j1],write)));
  ensures  Perm(x,1) ** x==0;
  ensures  (\forall* int i;0 <= i && i < N ; Perm(ar[i],write));
  ensures  (\forall int i;0 <= i && i < N ; ar[i]==0);
  ensures  (\forall* int i2 ; 0 <= i2 && i2 < M ;
             (\forall* int j2 ; 0 <= j2 && j2 < N ;
               Perm(matrix[i2][j2],write)));
  ensures  (\forall int i3 ; 0 <= i3 && i3 < M ;
             (\forall int j3 ; 0 <= j3 && j3 < N ;
               matrix[i3][j3]==0));
  void initialise(int M, int N, int[N] ar, int[M][N] matrix){
    par
      requires Perm(x,1);
      ensures  Perm(x,1) ** x==0;
    {
      x=0;
    }
    and (int i = 0 .. N)
      requires Perm(ar[i],write);
      ensures  Perm(ar[i],write) ** ar[i]==0;
    {
      ar[i]=0;
    }
    and (int i=0..M,int j=0..N)
      requires Perm(matrix[i][j],write);
      ensures  Perm(matrix[i][j],write);
      ensures  matrix[i][j]==0;
    {
      matrix[i][j]=0;
    }
  }

}


