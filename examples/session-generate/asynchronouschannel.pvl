class Channel {
	
	seq<int> buffer, sent, recvd;
									
	resource lock_invariant() = 
		Perm(buffer, 1) ** 
		Perm(sent, 1\2) ** 
		Perm(recvd, 1\2) ** 
		sent == recvd + buffer;
		
	ensures Perm(sent, 1\2) ** Perm(recvd, 1\2);
	ensures |sent| == 0;
	ensures |recvd| == 0;
	Channel() {
		buffer = seq<int> {};
		sent = seq<int> {};
		recvd = seq<int> {};
	}

	
	context Perm(sent, 1\2);
	ensures sent == \old(sent) ++ v;
	void writeValue(int v) {
		lock this;
		buffer = buffer ++ v;
		sent = sent ++ v;
		notify this;
		unlock this;
	}
	
	context Perm(recvd, 1\2);
	ensures recvd == \old(recvd) ++ \result;
	int readValue() {
		lock this;
		loop_invariant Perm(buffer, 1) ** Perm(sent, 1\2) ** Perm(recvd, 1) ** sent == recvd + buffer ** recvd == \old(recvd) ** held(this);
		while(|buffer| <= 0) {
			wait this;
		}
		int v = head(buffer);
		buffer = tail(buffer);
		recvd = recvd ++ v;
		unlock this;
		return v;
	}
	
}
