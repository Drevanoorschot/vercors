// -*- tab-width:2 ; indent-tabs-mode:nil -*-
//:: cases SummationKernel
//:: tools silicon
//:: verdict Pass

class Ref {

  int res;

  requires N>0;
  requires Perm(res,write);
  requires (\forall* int i;0 <= i && i < N ; Perm(ar[i],1/2));
  requires res==0;
  ensures  N>0;
  ensures  Perm(res,write);
  ensures  (\forall* int i;0 <= i && i < N ; Perm(ar[i],1/2));
  ensures  (\forall int i;0 <= i && i < N ; ar[i]==\old(ar[i]));
  ensures  res==(\sum int i;0 <= i && i < N ; ar[i]);
  void do_sum(int N, int[N] ar){
    int[N] contrib=new int[N];
    par (int i=0..N)
      requires Perm(contrib[i],1);
      ensures Perm(contrib[i],1) ** contrib[i]==0;
    {
      contrib[i]=0;
    }

    assert (\forall int k;0 <= k && k < N ; contrib[k]==0);
    assume (\sum int k;0 <= k && k < N ; contrib[k])==0;

    invariant main(
      N>0 ** Perm(res,write)**(\forall* int k;0 <= k && k < N ; Perm(contrib[k],1/2))
      ** res==(\sum int k;0 <= k && k < N ; contrib[k])
    ){
      par (int i = 0 .. N)
        requires N>0;
        requires Perm(ar[i],1/4);
        requires Perm(contrib[i],1/2);
        requires contrib[i]==0;
        ensures  N>0;
        ensures  Perm(ar[i],1/4);
        ensures  Perm(contrib[i],1/2);
        ensures  contrib[i]==ar[i];
      {
        atomic(main) {
          res = res + ar[i];
          
          assert res == (\sum int k;0 <= k && k < N ; contrib[k]) + ar[i];
          contrib[i] = contrib[i] + ar[i];
          assume res == (\sum int k;0 <= k && k < N ; contrib[k]);
        }
      }
    }
    
    assert (\forall int k;0 <= k && k < N ; contrib[k]==ar[k]);
    assert res==(\sum int k;0 <= k && k < N ; contrib[k]);
    assume res==(\sum int k;0 <= k && k < N ; ar[k]);

  }
}
