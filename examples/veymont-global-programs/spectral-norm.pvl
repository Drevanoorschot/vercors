class Collector {
    int n;
    int[] t1, t2, t3;
    int[] result;
    
    Collector(int nn) {
        n = nn;
    }
    
    void flatten() {
        result = new int[3*n];
        for(int i = 0; i < n; i++) {
            result[i] = t1[i];
            result[n + i] = t2[i];
            result[2*n + i] = t3[i];
        }
    }
}

class Times {
    int n;
    int[] x,u;
    boolean transpose;
    
    Times(int nn, boolean transp) {
        n = nn;
        transpose = transp;
    }
    
    void runn();
    //assign x
    
    void initx() {
        x = new int[n];
    }
    
    void initu() {
        u = new int[n];
        for(int i = 0; i < n; i++) {
            u[i] = 1;
        }
    }
    
}

class Calculator {
    int[] v, u; 
    int vBv, vv;
    
    Calculator() {
    }
    
    void compute();
    //compute vBv and vv from v and u
}

class Main {

    Times t1, t2, t3;
    Collector c;
    Calculator cal;
    
    Main(int n) {
        t1 = new Times(n,false);
        t2 = new Times(n,false);
        t3 = new Times(n,false);
        c = new Collector(n);
        cal = new Calculator();
    }
    
    void run() {
        t1.initu();
        t2.initu();
        t3.initu();
        aTimesTransp();
        t1.u = c.result;
        t2.u = c.result;
        t3.u = c.result;
        t1.transpose = true;
        t2.transpose = true;
        t3.transpose = true;
        aTimesTransp();
        cal.v = t1.u;
        cal.u = c.result;
        cal.compute();
    }
    
    void aTimesTransp() {
         par
        { 
            t1.initx();
            t1.runn();
            c.t1 = t1.x;
            
        } and 
        {
            t2.initx();
            t2.runn();
            c.t2 = t2.x;
        } and 
        {
            t3.initx();
            t3.runn();
            c.t3 = t3.x;
        }
        c.flatten(); // x in c.result
        par
        {
            t1.initx();
            t1.u = c.result;
            t1.runn();
            c.t1 = t1.x;
        } and {
            t2.initx();
            t2.u = c.result;
            t2.runn();
            c.t2 = t2.x;
        } and {
            t3.initx();
            t3.u = c.result;
            t1.runn();
            c.t3 = t3.x;
        }
        c.flatten(); // v in c.result
    }
    
    void main(int n) {
        Main m = new Main(n);
        m.run();
    }    
}
