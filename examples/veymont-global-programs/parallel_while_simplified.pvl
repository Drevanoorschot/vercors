// -*- tab-width:4 ; indent-tabs-mode:nil -*-
//:: cases ParallelWhileSimplified
//:: tools veymont
//:: verdict Pass

class Role {
	
	int x, left;
	
	ensures Perm(x, write) ** Perm(left, write);
	ensures x == v;
	Role (int v) {
		x = v;
	}
	
}


class Main {
	
	Role a, b, c;
	
	requires vb - vc == vc - va;
	ensures Perm(a,read) ** Perm(b,read) ** Perm(c,read);
	ensures Perm(a.x, write) ** Perm(a.left, write);
	ensures Perm(b.x, write) ** Perm(b.left, write);
	ensures Perm(c.x, write) ** Perm(c.left, write);
	ensures b.x - c.x == c.x - a.x;
	Main(int va, int vb, int vc) {
		a = new Role(va);
		b = new Role(vb);
		c = new Role(vc);
	}

	context Perm(a,read) ** Perm(b,read) ** Perm(c,read);
	context Perm(a.x, write) ** Perm(a.left, write);
	context Perm(b.x, write) ** Perm(b.left, write);
	context Perm(c.x, write) ** Perm(c.left, write);
	requires b.x - c.x == c.x - a.x;
	ensures a.x == b.x && b.x == c.x; 
	void run() {
		b.left = a.x;
		c.left = b.x;
		a.left = c.x;
		
		loop_invariant Perm(a,read) ** Perm(b,read) ** Perm(c,read);
		loop_invariant Perm(a.x, 1) ** Perm(b.x, 1) ** Perm(c.x, 1);
		loop_invariant Perm(a.left, 1) ** Perm(b.left, 1) ** Perm(c.left, 1);
		loop_invariant b.x - c.x == c.x - a.x;
		loop_invariant (a.left != a.x) == (b.left != b.x);
		loop_invariant (b.left != b.x) == (c.left != c.x);
		loop_invariant b.left == a.x && c.left == b.x && a.left == c.x;
		while(a.left != a.x && b.left != b.x && c.left != c.x) {
			a.x = a.x + 1;
			b.left = a.x;
			b.x = b.x - 1;
			c.left = b.x;
			a.left = c.x;
		}
	}

    requires vb - vc == vc - va;
	void main(int va, int vb, int vc) {
		Main m = new Main(va,vb,vc);
		m.run();
	}
	
}

