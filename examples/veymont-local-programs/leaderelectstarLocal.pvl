class MainFJ {
  
  static void MainFJ(){
    Barrier threadBarrier = new Barrier(4);
    IntegerChannel cbIntegerChan = new IntegerChannel();
    IntegerChannel caIntegerChan = new IntegerChannel();
    IntegerChannel acIntegerChan = new IntegerChannel();
    IntegerChannel dcIntegerChan = new IntegerChannel();
    IntegerChannel bcIntegerChan = new IntegerChannel();
    IntegerChannel cdIntegerChan = new IntegerChannel();
    AThread a = new AThread(threadBarrier,caIntegerChan,acIntegerChan);
    BThread b = new BThread(threadBarrier,cbIntegerChan,bcIntegerChan);
    CThread c = new CThread(threadBarrier,acIntegerChan,dcIntegerChan,cdIntegerChan,cbIntegerChan,bcIntegerChan,caIntegerChan);
    DThread d = new DThread(threadBarrier,cdIntegerChan,dcIntegerChan);
    fork a;
    fork b;
    fork c;
    fork d;
    join a;
    join b;
    join c;
    join d;
  }
  
}

class AThread {
  EndPoint a;
  IntegerChannel caIntegerChan;
  IntegerChannel acIntegerChan;
  Barrier threadBarrier;
  
  requires caIntegerChanArg != null;
  requires acIntegerChanArg != null;
  requires threadBarrierArg != null;
  ensures Perm( caIntegerChan , read );
  ensures Perm( acIntegerChan , read );
  ensures caIntegerChan == caIntegerChanArg;
  ensures acIntegerChan == acIntegerChanArg;
  ensures Perm( threadBarrier , read );
  ensures threadBarrier != null;
  ensures Perm( a , read );
  ensures Perm( a.rank , read );
  ensures Perm( a.maxVal , 1 );
  ensures Perm( a.c , 1 );
  ensures Perm( a.n , 1 );
  AThread(Barrier threadBarrierArg,IntegerChannel caIntegerChanArg,IntegerChannel acIntegerChanArg){
    a = new EndPoint(0);
    threadBarrier = threadBarrierArg;
    caIntegerChan = caIntegerChanArg;
    acIntegerChan = acIntegerChanArg;
  }
  
  context Perm( caIntegerChan , read );
  context caIntegerChan != null;
  context Perm( acIntegerChan , read );
  context acIntegerChan != null;
  context Perm( threadBarrier , read );
  context threadBarrier != null;
  context Perm( a , read );
  context Perm( a.rank , read );
  context Perm( a.maxVal , 1 );
  context Perm( a.c , 1 );
  context Perm( a.n , 1 );
  void run(){
    loop_invariant Perm( caIntegerChan , read );
    loop_invariant caIntegerChan != null;
    loop_invariant Perm( acIntegerChan , read );
    loop_invariant acIntegerChan != null;
    loop_invariant Perm( threadBarrier , read );
    loop_invariant threadBarrier != null;
    loop_invariant Perm( a , read );
    loop_invariant Perm( a.rank , read );
    loop_invariant Perm( a.maxVal , 1 );
    loop_invariant Perm( a.c , 1 );
    loop_invariant Perm( a.n , 1 );
    while(a.n < 2 && true && true && true){
      threadBarrier.await();
      a.c = caIntegerChan.readValue();
      acIntegerChan.writeValue(a.maxVal);
      a.updateMax();
    }
    threadBarrier.await();
  }
  
}

class BThread {
  EndPoint b;
  IntegerChannel cbIntegerChan;
  IntegerChannel bcIntegerChan;
  Barrier threadBarrier;
  
  requires cbIntegerChanArg != null;
  requires bcIntegerChanArg != null;
  requires threadBarrierArg != null;
  ensures Perm( cbIntegerChan , read );
  ensures Perm( bcIntegerChan , read );
  ensures cbIntegerChan == cbIntegerChanArg;
  ensures bcIntegerChan == bcIntegerChanArg;
  ensures Perm( threadBarrier , read );
  ensures threadBarrier != null;
  ensures Perm( b , read );
  ensures Perm( b.rank , read );
  ensures Perm( b.maxVal , 1 );
  ensures Perm( b.c , 1 );
  ensures Perm( b.n , 1 );
  BThread(Barrier threadBarrierArg,IntegerChannel cbIntegerChanArg,IntegerChannel bcIntegerChanArg){
    b = new EndPoint(8);
    threadBarrier = threadBarrierArg;
    cbIntegerChan = cbIntegerChanArg;
    bcIntegerChan = bcIntegerChanArg;
  }
  
  context Perm( cbIntegerChan , read );
  context cbIntegerChan != null;
  context Perm( bcIntegerChan , read );
  context bcIntegerChan != null;
  context Perm( threadBarrier , read );
  context threadBarrier != null;
  context Perm( b , read );
  context Perm( b.rank , read );
  context Perm( b.maxVal , 1 );
  context Perm( b.c , 1 );
  context Perm( b.n , 1 );
  void run(){
    loop_invariant Perm( cbIntegerChan , read );
    loop_invariant cbIntegerChan != null;
    loop_invariant Perm( bcIntegerChan , read );
    loop_invariant bcIntegerChan != null;
    loop_invariant Perm( threadBarrier , read );
    loop_invariant threadBarrier != null;
    loop_invariant Perm( b , read );
    loop_invariant Perm( b.rank , read );
    loop_invariant Perm( b.maxVal , 1 );
    loop_invariant Perm( b.c , 1 );
    loop_invariant Perm( b.n , 1 );
    while(true && b.n < 2 && true && true){
      threadBarrier.await();
      b.c = cbIntegerChan.readValue();
      bcIntegerChan.writeValue(b.maxVal);
      b.updateMax();
    }
    threadBarrier.await();
  }
  
}

class CThread {
  StarPoint c;
  IntegerChannel dcIntegerChan;
  IntegerChannel cbIntegerChan;
  IntegerChannel caIntegerChan;
  IntegerChannel acIntegerChan;
  IntegerChannel cdIntegerChan;
  IntegerChannel bcIntegerChan;
  Barrier threadBarrier;
  
  requires cdIntegerChanArg != null;
  requires caIntegerChanArg != null;
  requires acIntegerChanArg != null;
  requires bcIntegerChanArg != null;
  requires dcIntegerChanArg != null;
  requires cbIntegerChanArg != null;
  requires threadBarrierArg != null;
  ensures Perm( acIntegerChan , read );
  ensures Perm( caIntegerChan , read );
  ensures Perm( cdIntegerChan , read );
  ensures Perm( cbIntegerChan , read );
  ensures Perm( bcIntegerChan , read );
  ensures Perm( dcIntegerChan , read );
  ensures caIntegerChan == caIntegerChanArg;
  ensures acIntegerChan == acIntegerChanArg;
  ensures bcIntegerChan == bcIntegerChanArg;
  ensures cdIntegerChan == cdIntegerChanArg;
  ensures dcIntegerChan == dcIntegerChanArg;
  ensures cbIntegerChan == cbIntegerChanArg;
  ensures Perm( threadBarrier , read );
  ensures threadBarrier != null;
  ensures Perm( c , read );
  ensures Perm( c.rank , read );
  ensures Perm( c.maxVal , 1 );
  ensures Perm( c.a , 1 );
  ensures Perm( c.b , 1 );
  ensures Perm( c.d , 1 );
  ensures Perm( c.n , 1 );
  CThread(Barrier threadBarrierArg,IntegerChannel acIntegerChanArg,IntegerChannel dcIntegerChanArg,IntegerChannel cdIntegerChanArg,IntegerChannel cbIntegerChanArg,IntegerChannel bcIntegerChanArg,IntegerChannel caIntegerChanArg){
    c = new StarPoint(4);
    threadBarrier = threadBarrierArg;
    cbIntegerChan = cbIntegerChanArg;
    bcIntegerChan = bcIntegerChanArg;
    dcIntegerChan = dcIntegerChanArg;
    acIntegerChan = acIntegerChanArg;
    caIntegerChan = caIntegerChanArg;
    cdIntegerChan = cdIntegerChanArg;
  }
  
  context Perm( dcIntegerChan , read );
  context dcIntegerChan != null;
  context Perm( cbIntegerChan , read );
  context cbIntegerChan != null;
  context Perm( caIntegerChan , read );
  context caIntegerChan != null;
  context Perm( acIntegerChan , read );
  context acIntegerChan != null;
  context Perm( cdIntegerChan , read );
  context cdIntegerChan != null;
  context Perm( bcIntegerChan , read );
  context bcIntegerChan != null;
  context Perm( threadBarrier , read );
  context threadBarrier != null;
  context Perm( c , read );
  context Perm( c.rank , read );
  context Perm( c.maxVal , 1 );
  context Perm( c.a , 1 );
  context Perm( c.b , 1 );
  context Perm( c.d , 1 );
  context Perm( c.n , 1 );
  void run(){
    loop_invariant Perm( dcIntegerChan , read );
    loop_invariant dcIntegerChan != null;
    loop_invariant Perm( cbIntegerChan , read );
    loop_invariant cbIntegerChan != null;
    loop_invariant Perm( caIntegerChan , read );
    loop_invariant caIntegerChan != null;
    loop_invariant Perm( acIntegerChan , read );
    loop_invariant acIntegerChan != null;
    loop_invariant Perm( cdIntegerChan , read );
    loop_invariant cdIntegerChan != null;
    loop_invariant Perm( bcIntegerChan , read );
    loop_invariant bcIntegerChan != null;
    loop_invariant Perm( threadBarrier , read );
    loop_invariant threadBarrier != null;
    loop_invariant Perm( c , read );
    loop_invariant Perm( c.rank , read );
    loop_invariant Perm( c.maxVal , 1 );
    loop_invariant Perm( c.a , 1 );
    loop_invariant Perm( c.b , 1 );
    loop_invariant Perm( c.d , 1 );
    loop_invariant Perm( c.n , 1 );
    while(true && true && c.n < 2 && true){
      threadBarrier.await();
      caIntegerChan.writeValue(c.maxVal);
      cbIntegerChan.writeValue(c.maxVal);
      cdIntegerChan.writeValue(c.maxVal);
      c.a = acIntegerChan.readValue();
      c.b = bcIntegerChan.readValue();
      c.d = dcIntegerChan.readValue();
      c.updateMax();
    }
    threadBarrier.await();
  }
  
}

class DThread {
  EndPoint d;
  IntegerChannel cdIntegerChan;
  IntegerChannel dcIntegerChan;
  Barrier threadBarrier;
  
  requires cdIntegerChanArg != null;
  requires dcIntegerChanArg != null;
  requires threadBarrierArg != null;
  ensures Perm( cdIntegerChan , read );
  ensures Perm( dcIntegerChan , read );
  ensures cdIntegerChan == cdIntegerChanArg;
  ensures dcIntegerChan == dcIntegerChanArg;
  ensures Perm( threadBarrier , read );
  ensures threadBarrier != null;
  ensures Perm( d , read );
  ensures Perm( d.rank , read );
  ensures Perm( d.maxVal , 1 );
  ensures Perm( d.c , 1 );
  ensures Perm( d.n , 1 );
  DThread(Barrier threadBarrierArg,IntegerChannel cdIntegerChanArg,IntegerChannel dcIntegerChanArg){
    d = new EndPoint(5);
    threadBarrier = threadBarrierArg;
    cdIntegerChan = cdIntegerChanArg;
    dcIntegerChan = dcIntegerChanArg;
  }
  
  context Perm( cdIntegerChan , read );
  context cdIntegerChan != null;
  context Perm( dcIntegerChan , read );
  context dcIntegerChan != null;
  context Perm( threadBarrier , read );
  context threadBarrier != null;
  context Perm( d , read );
  context Perm( d.rank , read );
  context Perm( d.maxVal , 1 );
  context Perm( d.c , 1 );
  context Perm( d.n , 1 );
  void run(){
    loop_invariant Perm( cdIntegerChan , read );
    loop_invariant cdIntegerChan != null;
    loop_invariant Perm( dcIntegerChan , read );
    loop_invariant dcIntegerChan != null;
    loop_invariant Perm( threadBarrier , read );
    loop_invariant threadBarrier != null;
    loop_invariant Perm( d , read );
    loop_invariant Perm( d.rank , read );
    loop_invariant Perm( d.maxVal , 1 );
    loop_invariant Perm( d.c , 1 );
    loop_invariant Perm( d.n , 1 );
    while(true && true && true && d.n < 2){
      threadBarrier.await();
      d.c = cdIntegerChan.readValue();
      dcIntegerChan.writeValue(d.maxVal);
      d.updateMax();
    }
    threadBarrier.await();
  }
  
}

class EndPoint {
  int rank;
  int maxVal;
  int c;
  int n;
  
  ensures Perm( rank , read );
  ensures Perm( maxVal , 1 );
  ensures Perm( c , 1 );
  ensures Perm( n , 1 );
  EndPoint(int v);
  
  context Perm( maxVal , 1 );
  context Perm( c , 1 \ 2 );
  context Perm( n , 1 );
  void updateMax();
  
}

class StarPoint {
  int rank;
  int maxVal;
  int a;
  int b;
  int d;
  int n;
  
  ensures Perm( rank , read );
  ensures Perm( maxVal , 1 );
  ensures Perm( a , 1 );
  ensures Perm( b , 1 );
  ensures Perm( d , 1 );
  ensures Perm( n , 1 );
  StarPoint(int v);
  
  context Perm( maxVal , 1 );
  context Perm( a , 1 \ 2 );
  context Perm( b , 1 \ 2 );
  context Perm( d , 1 \ 2 );
  context Perm( n , 1 );
  void updateMax();
  
  pure int maxVal(int a,int b,int c,int d);
  
}

class IntegerChannel {
  boolean transfering;
  int exchangeValue;
  
  resource lock_invariant()=Perm( transfering , 1 ) ** Perm( exchangeValue , 1 );
  
  IntegerChannel(){
    transfering = true;
  }
  
  void writeValue(int v){
    lock this;
    loop_invariant Perm( transfering , 1 );
    loop_invariant Perm( exchangeValue , 1 );
    loop_invariant held( this );
    while(! transfering){
      wait this;
    }
    transfering = false;
    exchangeValue = v;
    notify this;
    unlock this;
  }
  
  int readValue(){
    lock this;
    loop_invariant Perm( transfering , 1 );
    loop_invariant Perm( exchangeValue , 1 );
    loop_invariant held( this );
    while(transfering){
      wait this;
    }
    int v = exchangeValue;
    transfering = true;
    notify this;
    unlock this;
    return v;
  }
  
}

class Barrier {
  int k;
  int n;
  boolean outgoing;
  
  resource lock_invariant()=Perm( k , 1 ) ** Perm( n , read ) ** Perm( outgoing , 1 ) ** 0 <= k ** k < n ** (outgoing ? 1 <= k : 0 <= k) ** n > 1;
  
  requires nrThreads > 1;
  Barrier(int nrThreads){
    n = nrThreads;
    k = 0;
    outgoing = false;
  }
  
  void await(){
    lock this;
    loop_invariant held( this );
    loop_invariant Perm( k , 1 );
    loop_invariant Perm( n , read );
    loop_invariant Perm( outgoing , 1 );
    loop_invariant k < n;
    loop_invariant (outgoing ? 1 <= k : 0 <= k);
    loop_invariant n > 1;
    while(outgoing){
      wait this;
    }
    k ++;
    if (k == n) {
      outgoing = true;
      k --;
      loop_invariant Perm( n , read );
      loop_invariant (1 <= i && i <= n);
      loop_invariant held( this );
      for(int i = 1;i < n;i ++){
        notify this;
      }
    } else {
      loop_invariant held( this );
      loop_invariant Perm( k , 1 );
      loop_invariant Perm( n , read );
      loop_invariant Perm( outgoing , 1 );
      loop_invariant k < n;
      loop_invariant (outgoing ? 1 <= k : 0 <= k);
      loop_invariant n > 1;
      while(! outgoing){
        wait this;
      }
      k --;
      if (k == 0) {
        outgoing = false;
        loop_invariant Perm( n , read );
        loop_invariant (1 <= i && i <= n);
        loop_invariant held( this );
        for(int i = 1;i < n;i ++){
          notify this;
        }
      }
    }
    unlock this;
  }
  
}

