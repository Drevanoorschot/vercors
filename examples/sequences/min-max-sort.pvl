/**
NOT PROVEN YET
*/

class MinMaxSort {
    requires |input| > 0;
    ensures MinMaxSort.sorted(\result);
    seq<int> MinMaxSort(seq<int> input) {
        seq<int> unsorted = input;
	
	int low = 0;
	int upp = |unsorted|;

        loop_invariant |input| == |unsorted|;
        loop_invariant (\forall int l; 0 <= l && l < |unsorted|; unsorted[l] in input);
        loop_invariant (\forall int l; 0 <= l && l < |input|; input[l] in unsorted);
	loop_invariant 0 <= low;
	loop_invariant low <= upp && upp <= |unsorted|;
        loop_invariant (upp < |unsorted|) ==> MinMaxSort.sorted(unsorted[upp..]);
        while (upp > low ) {
            int maxOfSeq = MinMaxSort.max(unsorted[low..upp]);   
	    unsorted = MinMaxSort.swap(unsorted, maxOfSeq, upp-1);
	    upp = upp - 1;	
        }
        return unsorted ;
    }

    requires 0 <= i && i < |xs|;
    requires 0 <= j && j < |xs|;
    ensures |\result| == |xs|;
    ensures (\forall int k; 0 <= k && k < |xs| && k != i && k != j; \result[k] == xs[k]);
    ensures (\forall int k; 0 <= k && k < |\result| && k != i && k != j; \result[k] == xs[k]);
    ensures xs[i] in \result && xs[j] in \result;
    ensures \result[j] == xs[i];
    ensures \result[i] == xs[j];
    pure static seq<int> swap(seq<int> xs, int i, int j);

    requires |xs| > 0;
    ensures 0 <= \result && \result < |xs|;
    ensures (\forall int i; 0 <= i && i < |xs|; xs[i] <= xs[\result]);
    pure static int max(seq<int> xs) = MinMaxSort.maxhelper(xs, 0);


    requires |xs| > 0;
    requires 0 <= j && j < |xs|;
    ensures 0 <= \result && \result < |xs|;
    ensures \result >= j;
    ensures (\forall int i; j <= i && i < |xs|; xs[i] <= xs[\result]);
    pure static int maxhelper(seq<int> xs, int j) =
        j == |xs|-1 ?
            j:
            (xs[j] > xs[MinMaxSort.maxhelper(xs, j+1)] ?
                j:
                MinMaxSort.maxhelper(xs, j+1)
            )
    ;

    requires |xs| > 0;
    ensures 0 <= \result && \result < |xs|;
    ensures (\forall int i; 0 <= i && i < |xs|; xs[i] >= xs[\result]);
    pure static int min(seq<int> xs) = MinMaxSort.minhelper(xs, 0);


    requires |xs| > 0;
    requires 0 <= j && j < |xs|;
    ensures 0 <= \result && \result < |xs|;
    ensures \result >= j;
    ensures (\forall int i; j <= i && i < |xs|; xs[i] >= xs[\result]);
    pure static int minhelper(seq<int> xs, int j) =
        j == |xs|-1 ?
            j:
            (xs[j] < xs[MinMaxSort.minhelper(xs, j+1)] ?
                j:
                MinMaxSort.minhelper(xs, j+1)
            )
    ;

    pure static boolean sorted(seq<int> xs) = (\forall int i ; 0 <= i && i < |xs|-1; xs[i] <= xs[i+1]);

}
