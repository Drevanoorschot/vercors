class MergeSort {
	//ensures |\result| == |input|;
	//ensures MergeSort.sorted(\result);
	seq<int> mergesort(seq<int> input) {
		if (|input| <= 1) {
			return input;
		}
		
		int mid = |input|/2;
		seq<int> fst = input[..mid];
		seq<int> snd = input[mid..];
		assert input == fst + snd;		

		fst = this.mergesort(fst);
		snd = this.mergesort(snd);

		seq<int> result = seq<int> {};		
		int i = 0;
		int j = 0;

		return result;
	}


	requires MergeSort.sorted(fst) && MergeSort.sorted(snd);
	ensures |\result| == |fst| + |snd|;
	ensures (\forall int k; 0 <= k && k < |fst|; fst[k] in \result);
        ensures (\forall int k; 0 <= k && k < |snd|; snd[k] in \result);
	ensures MergeSort.sorted(\result);
	seq<int> merge(seq<int> fst, seq<int> snd) {
		seq<int> result = seq<int> {};
		int i = 0;
		int j = 0;


		loop_invariant 0 <= i && i <= |fst|;
                loop_invariant 0 <= j && j <= |snd|;
                loop_invariant MergeSort.sorted(fst) && MergeSort.sorted(snd);
                loop_invariant |result| == i + j;
                loop_invariant (\forall int k; 0 <= k && k < i; fst[k] in result);
                loop_invariant (\forall int k; 0 <= k && k < j; snd[k] in result);

                loop_invariant (i < |fst|) ==> (\forall int k; 0 <= k && k < |result|; result[k] <= fst[i]);
                loop_invariant (j < |snd|) ==> (\forall int k; 0 <= k && k < |result|; result[k] <= snd[j]);
		while (i < |fst| && j < |snd|) {
                        if (fst[i] <= snd[j]) {
                                result = result ++ fst[i];
                                i = i+1;
                        } else {
                                result = result ++ snd[j];
                                j = j+1;
                        }
                }


                assert (i < |fst|) ==> (\forall int k; 0 <= k && k < |result|; result[k] <= fst[i]);
                assert (j < |snd|) ==> (\forall int k; 0 <= k && k < |result|; result[k] <= snd[j]);
                assert (i == |fst| || j == |snd|);

                if (i < |fst|) {
                        result = result + fst[i..];
                } else if (j < |snd|) {
                        result = result + snd[j..];
                }
		
		return result;
	}

        pure static boolean sorted(seq<int> xs) = (\forall int i ; 0 <= i && i < |xs|-1; xs[i] <= xs[i+1]);



}	
