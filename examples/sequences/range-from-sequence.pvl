class Test {


	void main() {
		seq<int> a = seq<int> {1, 4, 5, 7, 8};

		seq<int> b = range(a, 1, 3);
		assert b == seq<int> {4, 5};
		
		seq<int> c = take(a, 1);
		assert c == seq<int> { 1 };

		seq<int> d = drop(a, 2);
		assert d == seq<int> { 5, 7, 8 };
		
		seq<int> e = a[1 .. 4];
		assert e == seq<int> {4, 5, 7};

		seq<seq<int>> f = seq<seq<int>> {seq<int>{1}, seq<int>{2}, seq<int>{3}, seq<int>{4}};
		assert f[0..|f|][0..|f|] == range(range(f, 0, |f|), 0, 4);
		
		seq<int> g = seq<int> {1, 2, 3, 4, 5};	
		assert g[2..] == seq<int> {3, 4,5};
		
		int i = 0;
		int N = 10;
		int[] k = new int[10];
		
		//loop_invariant 0 <= i && i <= N;
		//while (i < k.length) {	
		//	i = i + 1;
		//}
	}
	


	//requires n <= |xs|;
	//static pure seq<int> aTake(seq<int> xs, int n) =
	//	0 < n ? seq<int> { head(xs) } + Test.aTake(tail(xs), n - 1) : seq<int> { };
	
}
