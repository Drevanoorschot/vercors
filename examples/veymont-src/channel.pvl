//:: cases SynchronousChannel
//:: suite session-generate
//:: tools silicon
//:: verdict Pass
class IntegerChannel {

    boolean transfering;
    
    int exchangeValue;
    
    seq<int> sent, recvd;
    
    resource lock_invariant() = 
		Perm(transfering, 1) 
		** Perm(exchangeValue,1)
		** Perm(sent, 1\3)
		** Perm(recvd, 1\3)
		** (transfering	==> sent == recvd)
		** (!transfering ==> sent == recvd + seq<int>{exchangeValue})
		;
    
    ensures Perm(sent, 2\3) ** Perm(recvd, 2\3);
	ensures |sent| == 0;
	ensures |recvd| == 0;
    IntegerChannel() {
		transfering = true;
		sent = seq<int> {};
		recvd = seq<int> {};
    }
 
	context Perm(sent, 2\3);
	ensures sent == \old(sent) ++ v;
    void writeValue(int v) {
		lock this;
		loop_invariant Perm(transfering, 1) ** Perm(exchangeValue,1);
		loop_invariant held(this);
		loop_invariant Perm(sent, 1) ** Perm(recvd, 1\3);
		loop_invariant (transfering	==> sent == recvd);
		loop_invariant (!transfering ==> sent == recvd + seq<int>{exchangeValue});
		loop_invariant sent == \old(sent);
		while (!transfering) {
			wait this;
        }
        transfering = false;
        exchangeValue = v;
        sent = sent ++ v;
        notify this;
        unlock this;
    }
 
	context Perm(recvd, 2\3);
	ensures recvd == \old(recvd) ++ \result;
	ensures |recvd| == \old(|recvd|) + 1;
    int readValue() {
		lock this;
		loop_invariant Perm(transfering, 1) ** Perm(exchangeValue,1);
		loop_invariant held(this);
		loop_invariant Perm(sent, 1\3) ** Perm(recvd, 1);
		loop_invariant (transfering	==> sent == recvd);
		loop_invariant (!transfering ==> sent == recvd + seq<int>{exchangeValue});
		loop_invariant recvd == \old(recvd);
        while (transfering) {
			wait this;
        }
        int v = exchangeValue;
        recvd = recvd ++ v;
        transfering = true;
        notify this;
        unlock this;
        return v;
    } 
}

class BooleanChannel {

    boolean transfering;
    
    boolean exchangeValue;
    
    seq<boolean> sent, recvd;
    
    resource lock_invariant() = 
		Perm(transfering, 1) 
		** Perm(exchangeValue,1)
		** Perm(sent, 1\3)
		** Perm(recvd, 1\3)
		** (transfering	==> sent == recvd)
		** (!transfering ==> sent == recvd + seq<boolean>{exchangeValue})
		;
    
    ensures Perm(sent, 2\3) ** Perm(recvd, 2\3);
	ensures |sent| == 0;
	ensures |recvd| == 0;
    BooleanChannel() {
		transfering = true;
		sent = seq<boolean> {};
		recvd = seq<boolean> {};
    }
 
	context Perm(sent, 2\3);
	ensures sent == \old(sent) ++ v;
    void writeValue(boolean v) {
		lock this;
		loop_invariant Perm(transfering, 1) ** Perm(exchangeValue,1);
		loop_invariant held(this);
		loop_invariant Perm(sent, 1) ** Perm(recvd, 1\3);
		loop_invariant (transfering	==> sent == recvd);
		loop_invariant (!transfering ==> sent == recvd + seq<boolean>{exchangeValue});
		loop_invariant sent == \old(sent);
		while (!transfering) {
			wait this;
        }
        transfering = false;
        exchangeValue = v;
        sent = sent ++ v;
        notify this;
        unlock this;
    }
 
	context Perm(recvd, 2\3);
	ensures recvd == \old(recvd) ++ \result;
	ensures |recvd| == \old(|recvd|) + 1;
    boolean readValue() {
		lock this;
		loop_invariant Perm(transfering, 1) ** Perm(exchangeValue,1);
		loop_invariant held(this);
		loop_invariant Perm(sent, 1\3) ** Perm(recvd, 1);
		loop_invariant (transfering	==> sent == recvd);
		loop_invariant (!transfering ==> sent == recvd + seq<boolean>{exchangeValue});
		loop_invariant recvd == \old(recvd);
        while (transfering) {
			wait this;
        }
        boolean v = exchangeValue;
        recvd = recvd ++ v;
        transfering = true;
        notify this;
        unlock this;
        return v;
    } 
}


