//:: IgnoreFile(/Silicon/issue/168/)

field val: Int

domain IArray {
  function loc(a: IArray, i: Int): Ref
  function len(a: IArray): Int
  function first(r: Ref): IArray
  function second(r: Ref): Int

  axiom all_diff {
    forall a: IArray, i: Int :: {loc(a, i)}
      first(loc(a, i)) == a && second(loc(a, i)) == i
  }

  axiom length_nonneg {
    forall a: IArray :: len(a) >= 0
  }
}

method test01(a: IArray, n: Int)
  requires n > 5
  requires forall i: Int :: i in [0..n) ==> acc(loc(a, i).val)
  ensures  forall i: Int :: i in [0..n) ==> acc(loc(a, i).val)
  ensures  loc(a, 1).val == loc(a, 0).val + old(loc(a, 1).val)
{
  loc(a, 1).val := loc(a, 0).val + loc(a, 1).val
}

method test02(a1: IArray, a2: IArray, n: Int)
  requires a1 != a2
  requires forall i: Int :: i in [0..n) ==> acc(loc(a1, i).val, 1/3)
  requires forall i: Int :: i in [0..n) ==> acc(loc(a2, i).val, 1/3)
{
  assert forall i: Int :: i in [0..n) ==> loc(a1, i) != loc(a2, i)
}

method test03(a: IArray, left: Int, right: Int, pw1: Seq[Int], pw2: Seq[Int]) {
  inhale left == 0
  inhale right <= len(a)

  inhale 0 <= left && left < right && right < len(a)

  inhale forall i: Int :: i in [left..right+1) ==> acc(loc(a, i).val)

  inhale |pw1| == |pw2| && |pw2| == right + 1 - left
  inhale forall i: Int :: 0 <= i && i < |pw1| ==> left <= pw1[i] && pw1[i] <= right
  inhale forall i: Int :: 0 <= i && i < |pw2| ==> left <= pw2[i] && pw2[i] <= right

  inhale forall j: Int :: 0 <= j - left && j - left < |pw1| ==> loc(a, j).val == loc(a, pw1[j - left]).val
  inhale forall j: Int :: 0 <= j && j < |pw2| ==> loc(a, j + left).val == loc(a, pw2[j]).val

  assert forall j: Int :: 0 <= j - left && j - left < |pw2| ==> loc(a, j).val == loc(a, pw2[j - left]).val
  assert forall j: Int :: 0 <= j && j < |pw1| ==> loc(a, j + left).val == loc(a, pw1[j]).val
}
