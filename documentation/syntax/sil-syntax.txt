
// Declarations
sil-program ::=
	(
		import    |
		domain    |
		field     |
		function  |
		predicate |
		method
	)*

import ::=
    "import" relative-path

relative-path ::=
    \A(?:[\w-]+\/?)+\z

domain ::=
	"domain" domain-name "{"
		domain-function*
		axiom*
	"}"

domain-name ::=
	ident |
	ident "[" ident^,* "]"  //e.g. Seq[T]

domain-function ::=
	["unique"] "function" ident function-signature

function-signature ::=
	 formal-args ":" type
		
axiom ::=
	"axiom" ident "{" exp "}"

field ::=
	"field" ident ":" type

function ::=
	"function" ident function-signature
		precondition*
		postcondition*
	"{" exp "}"

precondition ::=
	"requires" exp

postcondition ::=
	"ensures" exp

invariant ::=
	"invariant" exp

predicate ::=
	"predicate" ident formal-args "{" exp "}"

method ::=
	"method" ident formal-args [formal-returns]
			precondition*  postcondition*
		block

formal-args ::=
	"(" formal-arg^,* ")"
	
formal-arg ::=
	ident ":" type

formal-returns ::=
	"returns" formal-args

// Statements		
block ::=
	"{" stmt "}"

stmt ::=
	"var" ident  ":" type [":=" exp] // local variable
	                                 // declaration with an
																	 // optional initial value
	ident         ":=" exp | // local variable assignment
	field-access  ":=" exp | // field assignment
	ident         ":=" "new(*)" | // object creation
                                // (all fields)
	ident         ":=" "new(" ident^,* ")" | // obj. creation 
                                    // (specified fields)
	
	"assert" exp |
	"assume" exp |
	"inhale" exp |
	"exhale" exp |
	"fold"   acc-exp |
	"unfold" acc-exp |
	
	"goto" ident    |           // goto statement
	ident ":"       |           // a goto label
	
	if-statement    |
	while-statement |
	call-statement  |	
	fresh-block
		
if-statement ::=
	"if" "(" exp ")"
		statement-block
	("elsif" "(" exp ")"
		statement-block
	)*            // any number of elseif branches
	["else"
		statement-block
	]             // optional else branch
	
while-statement ::=
	"while" "(" exp ")"
			invariant*
		statement-block

call-statement ::= // method call [with return target]
	[ident^,* :=] ident "(" exp^,* ")"
	
fresh-statement ::=	
	"fresh" ident^,*
	
constraining-block ::=	
	"constraining" "(" ident^,* ")"
		block

// Expressions
binop ::=
	"==" | "!=" |                  // equality operators
	"==>" | "||" | "&&" |"<==>" |  // boolean operators
	"<" | "<=" | ">" | ">=" |      // ordering
	                               //  (integers and permissions)
	"+" | "-" | "*" |              // arithmetic operators
	                               //  (integers and permissions)
	                               // also int*permission
	"\\" | "\%" |                  // arithmetic division
	                               //  and modulo
	"\/" |                         // permission division
	                               //  (of two integers)

	"union" | "intersection" | "setminus"  //set operators
	"++"  |           // sequence concatenation
	"in"  |           // set/multiset/sequence membership
	"subset"          // subset relation
	
unop ::=
	"!" |            // boolean negation
	"+" | "-"        // integer and permission
	
exp ::=
	"true"  | "false" |          // boolean literal
	integer |                    // integer literal
	
	"null"   |                   // null literal
	"result" |                   // result literal in
	                             //  function postconditions
	ident    |                   // local variable read
	
	"(" exp ")" |

	unop exp |                  // unary expression
	exp binop exp |             // binary expression
	exp "?" exp ":" exp |       // conditional expression

	"old" "(" exp ")"            // old expression

	"none"     |             // no permission literal
	"write"    |             // full permission literal
	"epsilon"  |             // epsilon permission literal
	"wildcard" |             // wildcard permission
	exp "/" exp |            // concrete fractional
	                         //  permission
	
	"perm" "(" loc-access ")" | // current permission
	                            //  of given location
	
	acc-exp  |                   // accessibility predicate
	
	ident "(" exp^,* ")" |  // [domain] function
	                        //  application
	field-access         |  // field read
	predicate-access     |  // predicate access

	"[" exp "," exp "]" |        // inhale exhale expression
	"unfolding" acc-exp in exp | // unfolding expression
	
	// quantification
	"forall" formal-arg^,* "::" trigger^,* exp |
	"exists" formal-arg^,* "::" trigger^,* exp |
	
	seq-constructor-exp      |
	set-constructor-exp      |
	
	seq-op-exp |
	set-op-exp

seq-constructor-exp ::=	
	"Seq" "[" type "]" "()" | // the empty sequence
	"Seq" "(" exp^,* ")"     | // explicit sequence
	"[" exp ".." exp ")"      // half-open range of numbers
				
set-constructor-exp ::=
	"Set"      "[" type "]" "(" exp^,* ")" | // explicit set
	"Multiset" "[" type "]" "(" exp^,* ")"   // explicit
	                                        //   multiset			
set-op-exp ::=
	"|" exp "|"                 // set/multiset cardinality
				
seq-op-exp ::=
	exp "[" exp "]"          |  // sequence lookup
	exp "[" ".." exp "]"     |  // take n first elements
	exp "[" exp ".." "]"     |  // drop n first elements
	exp "[" exp ".." exp "]" |  // take and drop
	exp "[" exp ":=" exp "]" |  // update sequence at
	
	"|" exp "|"                 // length of a sequence

trigger ::=
	"{" exp^,* "}"  // a trigger for a quantification

acc-exp ::=
	"acc" "(" loc-access ["," exp ]")" //access
	                                   // default is write
loc-access ::=
	field-access | predicate-access
	
field-access ::=
	exp "." ident |              // field access
	
predicate-access ::=
	ident "(" exp^,* ")"         // predicate access

// Types
type ::=
	"Int" | "Bool" | "Perm" | "Ref" |  // primitive types
	"Seq" "[" type "]"                 // sequence type
	"Set" "[" type "]"                 // set type
	"Multiset" "[" type "]"            // multiset type
	ident [ "[" type^,* "]" ]
	             // [instance of a generic] domain type

// Identifiers
	ident ::=    // regular expression for an identifier
		"[a-zA-Z$_][a-zA-Z0-9$_']*"
