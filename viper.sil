function method_MinMaxSort_max__Sequence$Integer$(xs: Seq[Int]): Int
  requires 0 < |xs|
  ensures 0 <= result && result < |xs|
  ensures (forall i: Int :: 0 <= i && i < |xs| ==> xs[i] <= xs[result]) 
{
  method_MinMaxSort_maxhelper__Sequence$Integer$__Integer(xs, 0)
}

function method_MinMaxSort_maxhelper__Sequence$Integer$__Integer(xs: Seq[Int], j: Int): Int
  requires 0 < |xs|
  requires 0 <= j && j < |xs|
  ensures 0 <= result && result < |xs|
  ensures j <= result
  ensures (forall i: Int :: j <= i && i < |xs| ==> xs[i] <= xs[result]) 
{
  (j == |xs| - 1 ? j : (xs[method_MinMaxSort_maxhelper__Sequence$Integer$__Integer(xs, j + 1)] < xs[j] ? j : method_MinMaxSort_maxhelper__Sequence$Integer$__Integer(xs, j + 1)))
}

function method_MinMaxSort_min__Sequence$Integer$(xs: Seq[Int]): Int
  requires 0 < |xs|
  ensures 0 <= result && result < |xs|
  ensures (forall i: Int :: 0 <= i && i < |xs| ==> xs[result] <= xs[i]) 
{
  method_MinMaxSort_minhelper__Sequence$Integer$__Integer(xs, 0)
}

function method_MinMaxSort_minhelper__Sequence$Integer$__Integer(xs: Seq[Int], j: Int): Int
  requires 0 < |xs|
  requires 0 <= j && j < |xs|
  ensures 0 <= result && result < |xs|
  ensures j <= result
  ensures (forall i: Int :: j <= i && i < |xs| ==> xs[result] <= xs[i]) 
{
  (j == |xs| - 1 ? j : (xs[j] < xs[method_MinMaxSort_minhelper__Sequence$Integer$__Integer(xs, j + 1)] ? j : method_MinMaxSort_minhelper__Sequence$Integer$__Integer(xs, j + 1)))
}

function method_MinMaxSort_sorted__Sequence$Integer$(xs: Seq[Int]): Bool 
{
  (forall i: Int :: 0 <= i && i < |xs| - 1 ==> xs[i] <= xs[i + 1])
}

function remove_by_index_Sequence_Integer_(seq0: Seq[Int], i0: Int): Seq[Int]
  requires 0 <= i0 && i0 < |seq0|
  ensures |result| == |seq0| - 1
  ensures (forall j0: Int :: 0 <= j0 && j0 < i0 ==> result[j0] == seq0[j0])
  ensures (forall j0: Int :: i0 <= j0 && j0 < |result| ==> result[j0] == seq0[j0 + 1]) 


method constructor_MinMaxSort_MinMaxSort__Sequence$Integer$(diz: Ref, current_thread_id: Int, globals: Ref, input: Seq[Int]) returns (sys__result: Seq[Int])
  requires diz != null
  requires 0 <= current_thread_id
  ensures (forall k: Int :: 0 <= k && k < |input| ==> (input[k] in sys__result))
  ensures (forall k: Int :: 0 <= k && k < |sys__result| ==> (sys__result[k] in input))
  ensures |sys__result| == |input|
  ensures method_MinMaxSort_sorted__Sequence$Integer$(sys__result)
{
  var minOfSeq__32: Int
  var maxOfSeq__31: Int
  var unsorted__1: Seq[Int]
  var left__2: Seq[Int]
  var __flatten_1__3: Seq[Int]
  var right__4: Seq[Int]
  var __flatten_2__5: Seq[Int]
  var __flatten_3__6: Int
  var __flatten_4__7: Seq[Int]
  var __flatten_5__8: Seq[Int]
  var __flatten_6__9: Int
  var __flatten_7__10: Seq[Int]
  var __flatten_8__11: Seq[Int]
  var __flatten_9__12: Seq[Int]
  var __flatten_10__13: Seq[Int]
  var __flatten_11__14: Seq[Int]
  var __flatten_12__15: Int
  var __flatten_13__16: Seq[Int]
  var __flatten_14__17: Seq[Int]
  var __flatten_15__18: Int
  var __flatten_16__19: Seq[Int]
  var __flatten_17__20: Seq[Int]
  // refuteassert !false
  unsorted__1 := input
  __flatten_10__13 := Seq[Int]()
  __flatten_1__3 := __flatten_10__13
  left__2 := __flatten_1__3
  __flatten_11__14 := Seq[Int]()
  __flatten_2__5 := __flatten_11__14
  right__4 := __flatten_2__5
  while (2 <= |unsorted__1|)
    invariant |input| == |left__2| + |right__4| + |unsorted__1|
    invariant (forall l__21: Int :: 0 <= l__21 && l__21 < |left__2| ==> (left__2[l__21] in input))
    invariant (forall l__22: Int :: 0 <= l__22 && l__22 < |right__4| ==> (right__4[l__22] in input))
    invariant (forall l__23: Int :: 0 <= l__23 && l__23 < |unsorted__1| ==> (unsorted__1[l__23] in input))
    invariant (forall el__24: Int :: (el__24 in old(unsorted__1)) && !((el__24 in unsorted__1)) && el__24 == old(method_MinMaxSort_min__Sequence$Integer$(unsorted__1)) ==> (el__24 in left__2))
    invariant (forall el__25: Int :: (el__25 in old(unsorted__1)) && !((el__25 in unsorted__1)) && el__25 == old(method_MinMaxSort_max__Sequence$Integer$(unsorted__1)) ==> (el__25 in right__4))
    invariant (forall l__26: Int :: 0 <= l__26 && l__26 < |input| ==> (input[l__26] in unsorted__1) || (input[l__26] in left__2) || (input[l__26] in right__4))
    invariant !(0 == |unsorted__1|) ==> (forall l__27: Int :: 0 <= l__27 && l__27 < |right__4| ==> unsorted__1[method_MinMaxSort_max__Sequence$Integer$(unsorted__1)] <= right__4[l__27])
    invariant !(0 == |unsorted__1|) ==> (forall l__28: Int :: 0 <= l__28 && l__28 < |left__2| ==> left__2[l__28] <= unsorted__1[method_MinMaxSort_min__Sequence$Integer$(unsorted__1)])
    invariant (forall l__29: Int, k__30: Int :: 0 <= l__29 && l__29 < |left__2| && (0 <= k__30 && k__30 < |right__4|) ==> left__2[l__29] <= right__4[k__30])
    invariant method_MinMaxSort_sorted__Sequence$Integer$(left__2)
    invariant method_MinMaxSort_sorted__Sequence$Integer$(right__4) 
  {
    __flatten_12__15 := method_MinMaxSort_max__Sequence$Integer$(unsorted__1)
    __flatten_3__6 := __flatten_12__15
    maxOfSeq__31 := __flatten_3__6
    __flatten_13__16 := Seq(unsorted__1[maxOfSeq__31])
    __flatten_4__7 := __flatten_13__16
    right__4 := __flatten_4__7 ++ right__4
    __flatten_14__17 := remove_by_index_Sequence_Integer_(unsorted__1, maxOfSeq__31)
    __flatten_5__8 := __flatten_14__17
    unsorted__1 := __flatten_5__8
    __flatten_15__18 := method_MinMaxSort_min__Sequence$Integer$(unsorted__1)
    __flatten_6__9 := __flatten_15__18
    minOfSeq__32 := __flatten_6__9
    __flatten_16__19 := Seq(unsorted__1[minOfSeq__32])
    __flatten_7__10 := __flatten_16__19
    left__2 := left__2 ++ __flatten_7__10
    __flatten_17__20 := remove_by_index_Sequence_Integer_(unsorted__1, minOfSeq__32)
    __flatten_8__11 := __flatten_17__20
    unsorted__1 := __flatten_8__11
  }
  __flatten_9__12 := left__2 ++ unsorted__1 ++ right__4
  sys__result := __flatten_9__12
  // assertassert (forall k__33: Int :: 0 <= k__33 && k__33 < |input| ==> (input[k__33] in sys__result)) && (forall k__34: Int :: 0 <= k__34 && k__34 < |sys__result| ==> (sys__result[k__34] in input)) && |sys__result| == |input| && method_MinMaxSort_sorted__Sequence$Integer$(sys__result)
  inhale false
}

method constructor_MinMaxSort_MinMaxSort(current_thread_id: Int, globals: Ref) returns (sys__result: Ref)
  requires 0 <= current_thread_id
  ensures sys__result != null
{
  var diz__35: Ref
  diz__35 := new()
  // refuteassert !false
  sys__result := diz__35
  // assertassert sys__result != null
  inhale false
}

method array_new_Sequence_Integer_(size0: Int) returns (sys__result: Seq[Int])
  ensures (forall i0: Int :: 0 <= i0 && i0 < size0 ==> sys__result == Seq[Int]())
{
  inhale false
}